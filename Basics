let- not mutable variable camel case 
var- variable mutable camel case
const- not mutable uppercase

increment i++
decrement i--

augmented additon +=
augmented subtracts -=
augmented multiplication *=
augmented division /=

Double quotes

" string"
"string   \*quotes\* in it"

if you use '' you do not need back slashes.

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed

+= can be used with strings too.
you can concatenate variables inside a string.

string has .length to return string length
you can access string positions using brackets[0]
you can not change string values because they are inmutables, you must change all the 
GET last value of the string
const lastLetter = firstName[firstName.length - 1];

arrays mutables values indexable

const sandwich = ["peanut butter", "jelly", "bread"];
array.push(value)add value to the end of the array
array.unshift(value)add value to the first position
array.pop()delete value in the last position
array.shift()delete value in the first position


functions
Assign
function functionsUse(){
console.log("My Function");
}
Call
functionUse();

function with arguments
function functionWithArgs(sum1,sum2)
{
  console.log(sum1+sum2);
}

functionWithArgs(2,4);

function with return value
function timesFive(num){
  return num*5;
}

global variables

use const or let, put it at the beginning of the code, not inside any function.


you can assign an operation of a function to a variable.

FUNCTION CAN RETURN OR NOT VALUES

-The ones that not return, return data undefined.
-The ones that return, returns value assigned

SWITCH STATEMENT
switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}

IF- ELSE IF -ELSE
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}

END A FUNCTION WITH A RETURN STATEMENT 
// Setup
function abTest(a, b) {
  // Only change code below this line

if (a<0||b<0)
{
  return undefined;
}

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);

DIFFERENCES BETWEEN VAR AND LET
VAR IS GLOBAL - LET IS FOR LOCAL FUNCTIONS.
function checkScope() {
 let i = 'function scope';
  if (true) {
   let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}

CONST IS IN IMMUTABLE BUT FOR ARRAYS IT WORKS DIFFERENT YOU CAN NOT CHANGE THE ENTIRE VALUE BUT YOU CAN CHANGE BY INDEXES
const s = [5, 7, 2];
function editInPlace() {
  // Only change code below this line
s[0]=2;
s[1]=5;
s[2]=7;
  // Using s = [2, 5, 7] would be invalid

  // Only change code above this line
}
editInPlace();


ARROW FUNCTION
MANY STATEMENTS
const myFunc = function() {
  const myVar = "value";
  return myVar;
}

TO THIS

const myFunc = () => {
  const myVar = "value";
  return myVar;
}



OR 
ONLY REURN STATEMENT
var magic = function() {
  return new Date();
};

TO THIS

const magic = () => new Date();

EXAMPLE.2 
WITH PARAMETERS
const myConcat = (arr1, arr2)=> arr1.concat(arr2);

console.log(myConcat([1, 2], [3, 4, 5]));

EX.3 
INTRODUCE A DEFAULT VALUE IN PARAMETERS
// Only change code below this line
const increment = (number, value=1) => number + value;
// Only change code above this line

REST PARAMETERS IN FUNCTION PARAMETERS
-IF YOU DON'T KNOW THE SIDE OF THE ARRAY AND NEED TO USE ALL THE ELEMENTS YOU CAN USE THE REST PARAMETERS
const sum = (...args) => {


  return args.reduce((a, b) => a + b, 0);
}

--EXPORT FUNCTIONS TO USE IN OTHER FILES

const uppercaseString = (string) => {
  return string.toUpperCase();
}

const lowercaseString = (string) => {
  return string.toLowerCase()
}

export{uppercaseString,lowercaseString};

IMPORT FUNCTIONS TO USE THEM IN OTHER FILES

  import {uppercaseString,lowercaseString} from './string_functions.js';
// Only change code above this line

uppercaseString("hello");
lowercaseString("WORLD!");

IMPORT EVERY FUNCTION IN OTHER FILE
import * as stringFunctions from './string_functions.js';
// Only change code above this line

stringFunctions.uppercaseString("hello");
stringFunctions.lowercaseString("WORLD!");

--Create an Export Fallback with export default

export default function subtract(x, y) {
  return x - y;
}

WHEN YOU IMPORT A DEFAULT FUNCTION YOU  GIVE ANY NAME YOU WANT TO THE VARIABLE AND IT WILL TAKE THE DEFAULT VALUE
  import subtract from './math_functions.js';
// Only change code above this line

subtract(7,4);

CREATE A PROMISE 

const makeServerRequest = new Promise((resolve, reject) => {

});

PROMISE ARGUMENTS USE
const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer represents a response from a server
  let responseFromServer;
    
  if(responseFromServer) {
    // Change this line
    resolve ("We got the data");
  } else {  
    // Change this line
      reject("Data not received");
  }
});

--Handle a Fulfilled Promise with then (WHEN THE PROMISE IS SUCCESFUL 'THEN' SHOW CORRECT MESSAGE )

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to true to represent a successful response from a server
  let responseFromServer = true;
    
  if(responseFromServer) {
    resolve("We got the data");

    makeServerRequest.then(result => {
  console.log(result);
});
  } else {  
    reject("Data not received");
  }
});

WHEN THE PROMISE IS NOT COMPPLETED USE 'CATCH' TO SHOW ERROR

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);
});

makeServerRequest.catch(error => {
  console.log(error);
});
