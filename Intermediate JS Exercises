
SUMM ALL NUMBERS IN A RANGE

function sumAll(arr) {
  
let sumBetween=0;
for(let i=Math.min(...arr); i<=Math.max(...arr);i++)

{
sumBetween+=i;
}
return sumBetween;
}

sumAll([1, 4]);

--Diff Two Arrays

function diffArray(arr1, arr2) {
  const newArr = [];
  var major=[...arr1];
  var minor=[...arr2];
 var val=false;
function check(first,second){

   for (let i = 0; i < first.length; i++) {
      if (second.indexOf(first[i]) === -1) {
  
        newArr.push(first[i]);
      }
    }
  return newArr;
}

check(major,minor);


check(minor,major);

return newArr;

}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

--Seek and Destroy

function destroyer(arr) {
      
    var newArr2=[];
     for(let j=0; j<arguments[0].length;j++)
     {
       var val=false;
        for(let i=1; i<arguments.length;i++)
     {
  if(arguments[0][j]==arguments[i])
  {
   val=true;  
  }
         }
     if (!val)
  {
    newArr2.push(arguments[0][j])
  }
     }
       return newArr2;
  }
  
  destroyer([1, 2, 3, 1, 2, 3], 2, 3);

--ART THOU
function whatIsInAName(collection, source) {
 
var count=0;
   var prop=(Object.keys(source));
  const arr = [];
  // Only change code below this line
 for(let i=0; i<collection.length;i++)
 {
   for(let j=0; j<prop.length;j++)
   {
if(collection[0,i][prop[j]]==source[prop[j]])
{
    count++;
}
   }
   if (count==prop.length)
{
 arr.push(collection[0,i]);
}
count=0;
 }
  return arr;
}

whatIsInAName([{ "apple": 1, "bat": 2 }, { "apple": 1 }, { "apple": 1, "bat": 2, "cookie": 2 }], { "apple": 1, "cookie": 2 }); 

OR
function whatIsInAName(collection, source) {
  // "What's in a name? that which we call a rose
  // By any other name would smell as sweet.”
  // -- by William Shakespeare, Romeo and Juliet
  const souceKeys = Object.keys(source);

  // filter the collection
  return collection.filter(obj => {
    for (let i = 0; i < souceKeys.length; i++) {
      if (!obj.hasOwnProperty(souceKeys[i]) ||
          obj[souceKeys[i]] !== source[souceKeys[i]]) {
        return false;
      }
    }
    return true;
  });
}

// test here
whatIsInAName(
  [
    { first: "Romeo", last: "Montague" },
    { first: "Mercutio", last: null },
    { first: "Tybalt", last: "Capulet" }
  ],
  { last: "Capulet" }
);

--Spinal Tap Case

function spinalCase(str) {
 

    return str.match(/[A-Z][a-z]+|[a-z]+/g).join("-").toLowerCase();

}

spinalCase("AllThe-small Things");

OR

function spinalCase(str) {
  // "It's such a fine line between stupid, and clever."
  // --David St. Hubbins

  return str
    .split(/\s|_|(?=[A-Z])/)
    .join("-")
    .toLowerCase();
}

--Pig Latin

function translatePigLatin(str) {
let myRegex = /^[^aeiou]+/gi; // Change this line
var result= str.match(myRegex); 

 return result?
 str.slice(result[0].length)+result+"ay"
 :  str+"way";
}


translatePigLatin("glove");


--Search and Replace

function myReplace(str, before, after) {

    let myRegex = /^[A-Z]/; // Change this line
    var result= myRegex.test(before); 
  
      return result? str.replace(before,after[0].toUpperCase()+after.slice(1))
      : str.replace(before,after.toLowerCase()) ;
    }

myReplace("He is Sleeping on the couch", "Sleeping", "sitting");

--DNA Pairing

function pairElement(str) {

  const newArr=[];
  for(let i=0;i<str.length;i++)
  {
   
    switch(str[i])
    {
    case "G":
    newArr.push(["G","C"]);
  
    break;

  case "T":
   newArr.push(["T","A"]);
    break;
 case "A":
     newArr.push(["A","T"]);
    break;

     case "C":
    newArr.push(["C","G"]);
    break;
    }

  
  }

  console.log(newArr)
  return newArr; 
}

pairElement("ATCGA");

OR

function pairElement(str) {
  //create object for pair lookup
  var pairs = {
    A: "T",
    T: "A",
    C: "G",
    G: "C"
  };
  //split string into array of characters
  var arr = str.split("");
  //map character to array of character and matching pair
  return arr.map(x => [x, pairs[x]]);
}

//test here
pairElement("GCG");

Missing letters

function fearNotLetter(str) {
    for (let i = 0; i < str.length; i++) {
      /* code of current character */
      const charCode = str.charCodeAt(i);
  
      /* if code of current character is not equal to first character + no of iteration
          then a letter was skipped */
      if (charCode !== str.charCodeAt(0) + i) {
        /* if current character skipped past a character find previous character and return */
        return String.fromCharCode(charCode - 1);
      }
    }
    return undefined;
  }
  
  // test here
  console.log(fearNotLetter("abce"));
  
  SORTED UNION
  
  function uniteUnique(arr) {

for(let i=1; i<arguments.length;i++)
{
arr=arr.concat(arguments[i]);
}

for(let i=0; i<arr.length;i++)
{
for(let j=i+1; j<arr.length;j++)
{
if(arr[i]==arr[j])
{
arr[j]=0;
}
}
}



  return arr.filter(num=>num!=0);;
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

OR

function uniteUnique(...arr) {
    return [...new Set(arr.flat())];
  }
  
  // Or as an arrow function
 
  
  console.log(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]));
  
  
Convert HTML Entities

function convertHTML(str) {

const newArr=[];
str=str.split("");
  for(let i=0;i<str.length;i++)
  {
    switch(str[i])
    {
    case  "&":
    newArr.push("&amp;");
  
    break;

  case '<':
   newArr.push("&lt;");
    break;
 case '>':
     newArr.push("&gt;");
    break;

     case `'`:
    newArr.push("&apos;");
    break;

     case `"`:
    newArr.push("&quot;");
    break;

    default:
     newArr.push(str[i]);
    }

  
  }
var newArr1=newArr.join("");
 console.log(newArr1); 
  return newArr1;
  
}

convertHTML("Dolce & Gabbana");

OR

function convertHTML(str) {
  // Use Object Lookup to declare as many HTML entities as needed.
  const htmlEntities = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&apos;"
  };
  // Using a regex, replace characters with it's corresponding html entity
  return str.replace(/([&<>\"'])/g, match => htmlEntities[match]);
}

// test here
convertHTML("Dolce & Gabbana");

-- FIBO ODDS

function sumFibs(num) {
    const fibo=[0,1];
    for(let i=0; i<num+1;i++)
  {
    if(i>1)
      {
       fibo.push(fibo[i - 1] + fibo[i - 2]);             
      }
  }
      return fibo
    .filter(c=>c%2==1)
    .filter(b=>b<=num)
    .reduce((partialSum, a) => partialSum + a, 0);  
  }
sumFibs(10);


SUM PRIMES

function sumPrimes(num) {
  const primeNumbers=[];
 var prime=false;
    for(let i=2;i<=num;i++)
    {    
        var count=0;
     for(let j=1;j<=i;j++)
      {
     if(i % j == 0) {
       count++;
               }
         if (count>2)
         {
         prime=false;
           count=0;
           break;
         }
         else if(count==2)
         {
          prime=true;
         }
            }
  
  
      if(prime==true)
      {
        primeNumbers.push(i);
      }
  
  
    }

    return primeNumbers.reduce((a,b)=>a+b,0);
  }
  
  sumPrimes(977);
  
  SMALLEST COMMON MULTIPLE
  function smallestCommons(arr) {
    var major=Math.max(...arr);
    var minor=Math.min(...arr);
 
    const newArr=[];
    for (let i=minor; i<=major;i++)
    {
    newArr.push(i);
    }
   
   for(let j=1; j<  newArr.reduce((partialMulti, a) => partialMulti * a, 1);j++)
        {
             var count=0;
            for (let  i=0; i<newArr.length;i++)
    {
      if(j%newArr[i]==0)
      {
        count++;
      }
    }
  if (count==newArr.length)
     {
          return j;
     }
   
     } 
    
    }
       
    console.log(smallestCommons([1,5]));
    
   --DROP IT
   
   function dropElements(arr, func) {

    for(let i=0;i<arr.length;i++)
    {
  
   if(func(arr[i]))
   {
     break;
   }
    arr.shift();
    i--;

    }
 return arr;
    
  }

dropElements([1, 2, 3,4], function(n) {return n >=3 });

FLATTENED ARRAY

function steamrollArray(arr) {
    const flattenedArray = [];
    // Loop over array contents
    for (let i = 0; i < arr.length; i++) {
      if (Array.isArray(arr[i])) {
        // Recursively flatten entries that are arrays
        //  and push into the flattenedArray
        flattenedArray.push(...steamrollArray(arr[i]));
      } else {
        // Copy contents that are not arrays
        flattenedArray.push(arr[i]);
        console.log(flattenedArray);
      }
    }
    return flattenedArray;
  };
  
  // test here
  steamrollArray([1, [2], [3, [[4]]]]);
  
  --binary to string
  
  function binaryAgent(str) {
  var arr2= str.split(" ");;
   
  var final= [];




for(let i=0; i<arr2.length;i++)
{
 final.push(String.fromCharCode(parseInt(arr2[i], 2)));
}


console.log(final.join(""))
  return final.join("");
}

binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");

EVERITHING BE TRUE

function truthCheck(collection, pre) {
  var count=0;


  for(let i=0;i<collection.length;i++)
  {
    if(collection[i][pre]) 
    {
count++;
    }
  }
return count==collection.length? true:false;
}

truthCheck([{name: "Quincy", role: "Founder", isBot: false}, {name: "Naomi", role: "", isBot: false}, {name: "Camperbot", role: "Bot", isBot: true}], "isBot");

ARGUMENTS OPTIONAL

function addTogether() {

const[first, second]=arguments;
  if(!(typeof(first)=='number'))
  {

    return undefined
  } 


  
  if(arguments.length===1)
  {
  return (second) => addTogether(first, second);
  }
  
  
  
    if(!(typeof(second)=='number'))
  {
      return undefined
  } 
    return (arguments[0]+arguments[1])
  }
  
  addTogether();
  
  --Make a Person
  
  const Person = function(firstAndLast) {
let fullName = firstAndLast;
  
    
  // Only change code below this line
  // Complete the method below and implement the others similarly
  this.getFullName = function() {
    return firstAndLast;
  };
    this.getFirstName = function() {
    
     
    return firstAndLast.split(" ")[0] ;
  };
  this.getLastName = function() {
    
     
    return firstAndLast.split(" ")[1] ;
  };

this.setFirstName=function (first) {
firstAndLast=first + " " + fullName.split(" ")[1]; 
  };
  this.setLastName=function (last) {
firstAndLast = fullName.split(" ")[0] + " " + last;
  };
  this.setFullName=function (firstAndLastUpd) {
firstAndLast=firstAndLastUpd;
  };



 
 
};

const bob = new Person('Bob Ross');

bob.setFirstName("Haskell"); 
  console.log(Object.keys(bob).length);
  
 -- Map the Debris
 
 function orbitalPeriod(arr) {
  const GM = 398600.4418;
  const earthRadius = 6367.4447;
  const arr2=[];
for(let i=0; i<arr.length;i++)
{

  arr2.push({name : arr[i].name, orbitalPeriod: Math.round(2*Math.PI*Math.sqrt(Math.pow(arr[i].avgAlt+earthRadius,3)/GM))})
}

  return arr2;
}

orbitalPeriod([{name : "sputnik", avgAlt : 35873.5553}]);


  
