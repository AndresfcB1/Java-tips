
ASSESSING OBJECT PROPERTIES WITH BRACKETS NOTATION
const myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock",
  "NoSpace": "USS Enterprise"
};

myObj["Space Name"];
myObj['More Space'];
myObj["NoSpace"];

ADD  PROPERTIE TO OBJECT
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog["bark"] = "bow-wow"
DELETE PROPERTIES OBJECT
// Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

delete myDog.tails;
// Only change code below this line

UPDATE PROPERTIES VALUE
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog.name="Happy Coder";

TESTING IF AN OBJECT HAS A PROPERTY
const myObj = {
  top: "hat",
  bottom: "pants"
};

myObj.hasOwnProperty("top");
myObj.hasOwnProperty("middle");

MANIPULATE COMPLEX OBJECTS
const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
  {
    "artist": "Joel",
    "title": " Man",
    "release_year": 1999,
    "formats": [
      "MP3",
      "MP4",
      "N45"
    ],
    
  }
];

ASSESSING NESTED OBJECTS

const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

const gloveBoxContents = myStorage.car.inside["glove box"];

ASSESSING NESTED ARRAYS
const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1];
RECORD COLLECTION

// Setup
const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  console.log(id+ prop+ value)
if(prop!='tracks'&&value.length>0)
{
  console.log("entra1")
records[id][prop]=value;
}
else if(prop=='tracks'&&records[id].hasOwnProperty(prop)&&value.length>0)
{
 
  console.log("entra3")
 
records[id][prop].push(value);
}

else if(prop=='tracks'&&!records[id].hasOwnProperty('prop')&&value.length>0)
{
    console.log("entra2")
  var z=[];
  z.push(value);
  console.log(z);
records[id][prop]=z;
  console.log(records);
}

else if(value.length==0)
{
  console.log("entra4")
delete records[id][prop];
}

  return records;
}

updateRecords(recordCollection, 5439, 'artist', 'ABBA');

PREVENTS OBJECTS MUTATION

function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // Only change code below this line
Object.freeze(MATH_CONSTANTS);

  // Only change code above this line
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();


EXTRACTING VALUES FROM OBJECTS

const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line

const {today, tomorrow} = HIGH_TEMPERATURES;

// Only change code above this line

DESTRUCTURING: EXTRACTING VALUES AND ASSIGNING TO VARIABLES

const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line
  
const {today:highToday,tomorrow: highTomorrow} = HIGH_TEMPERATURES; 

// Only change code above this line

DESTRUCTURING: EXTRACTING VALUES AND ASSIGNING TO VARIABLES FROM A NESTED OBJECT

const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};

// Only change code below this line
  


const{ today:{low:lowToday,high:highToday}}=LOCAL_FORECAST;


--Use Destructuring Assignment to Pass an Object as a Function's Parameters

const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};

// Only change code below this line
const half = ({max,min}) => {
  
  return(max + min) / 2.0; 
}
// Only change code above this line

--Write Concise Object Literal Declarations Using Object Property Shorthand
const createPerson = (name, age, gender) => ({name,age,gender});

--Write Concise Declarative Functions with ES6

// Only change code below this line
const bicycle = {
  gear: 2,
  setGear (newGear) {
    this.gear = newGear;
  }
};
// Only change code above this line
bicycle.setGear(3);
console.log(bicycle.gear);

--Use class Syntax to Define a Constructor Function

// Only change code below this line
class Vegetable{
  constructor(name){
    this.name=name;
  }
}

--Use getters and setters to Control Access to an Object

// Only change code below this line
class Thermostat {
  constructor(temperature) {
    this._temperature = temperature;
  }
  // getter RETURN CELSIUS
  get temperature() {
    
      return 5/9 * (this._temperature - 32);
  }
   

  // setter RETURN FARENHEITS
  set temperature(temp) {
temp=temp * 9.0 / 5 + 32;
this._temperature= temp;
  }
}
// Only change code above this line

const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius
// Only change code above this line

const carrot = new Vegetable('carrot');
console.log(carrot.name); // Should display 'carrot'

--Add Key-Value Pairs to JavaScript Objects

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28
};

// Only change code below this line
foods.bananas=13;
foods.grapes=35;
foods.strawberries=27;
// Only change code above this line

console.log(foods);

MODIFY A NESTED OBJECT

let userActivity = {
  id: 23894201352,
  date: 'January 1, 2017',
  data: {
    totalUsers: 51,
    online: 42
  }
};

// Only change code below this line
userActivity.data.online=45;
// Only change code above this line

console.log(userActivity);

ACCESS PROPERTIES VALUES WITH BRACKET NOTATION

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

function checkInventory(scannedItem) {
  // Only change code below this line
return foods[scannedItem];

  // Only change code above this line
}

console.log(checkInventory("apples"));

DELETE KEYWORD TO REMOVE OBJECT PROPERTIES

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

// Only change code below this line
delete foods['oranges'];
delete foods.strawberries;
delete foods.plums;
// Only change code above this line

console.log(foods);

CHECK IF AN OBJECT HAS A PROPERTY

users.hasOwnProperty('Alan');
'Alan' in users;

EX1.

let users = {
  Alan: {
    age: 27,
    online: true
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: true
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function isEveryoneHere(userObj) {
  // Only change code below this line
 return 'Alan' in userObj&&'Jeff' in userObj&&'Sarah' in userObj&&'Ryan' in userObj;
  // Only change code above this line
}

console.log(isEveryoneHere(users));

--Iterate Through the Keys of an Object with a for...in Statement

const users = {
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: false
  }
}

function countOnline(usersObj) {
  // Only change code below this line
  var count=0;
for (let user in usersObj) {
  if(usersObj[user].online==true)
  {
count++;
  }
}
return count;
  // Only change code above this line
}

console.log(countOnline(users));

RETURN OBJECT KEYS

let users = {
  Alan: {
    age: 27,
    online: false
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: false
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function getArrayOfUsers(obj) {
  // Only change code below this line
return Object.keys(obj)
  // Only change code above this line
}

console.log(getArrayOfUsers(users));

--Modify an Array Stored in an Object

let user = {
  name: 'Kenneth',
  age: 28,
  data: {
    username: 'kennethCodesAllDay',
    joinDate: 'March 26, 2016',
    organization: 'freeCodeCamp',
    friends: [
      'Sam',
      'Kira',
      'Tomo'
    ],
    location: {
      city: 'San Francisco',
      state: 'CA',
      country: 'USA'
    }
  }
};

function addFriend(userObj, friend) {
  // Only change code below this line
userObj.data.friends.push(friend);
return userObj.data.friends;
  // Only change code above this line
}

console.log(addFriend(user, 'Pete'));
