let- not mutable variable camel case 
var- variable mutable camel case
const- not mutable uppercase

increment i++
decrement i--

augmented additon +=
augmented subtracts -=
augmented multiplication *=
augmented division /=

Double quotes

" string"
"string   \*quotes\* in it"

if you use '' you do not need back slashes.

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed

+= can be used with strings too.
you can concatenate variables inside a string.

string has .length to return string length
you can access string positions using brackets[0]
you can not change string values because they are inmutables, you must change all the 
GET last value of the string
const lastLetter = firstName[firstName.length - 1];

arrays mutables values indexable

const sandwich = ["peanut butter", "jelly", "bread"];
array.push(value)add value to the end of the array
array.unshift(value)add value to the first position
array.pop()delete value in the last position
array.shift()delete value in the first position


functions
Assign
function functionsUse(){
console.log("My Function");
}
Call
functionUse();

function with arguments
function functionWithArgs(sum1,sum2)
{
  console.log(sum1+sum2);
}

functionWithArgs(2,4);

function with return value
function timesFive(num){
  return num*5;
}

global variables

use const or let, put it at the beginning of the code, not inside any function.


you can assign an operation of a function to a variable.

FUNCTION CAN RETURN OR NOT VALUES

-The ones that not return, return data undefined.
-The ones that return, returns value assigned

SWITCH STATEMENT
switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}

IF- ELSE IF -ELSE
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}

END A FUNCTION WITH A RETURN STATEMENT 
// Setup
function abTest(a, b) {
  // Only change code below this line

if (a<0||b<0)
{
  return undefined;
}

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);

ASSESSING OBJECT PROPERTIES WITH BRACKETS NOTATION
const myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock",
  "NoSpace": "USS Enterprise"
};

myObj["Space Name"];
myObj['More Space'];
myObj["NoSpace"];

ADD  PROPERTIE TO OBJECT
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog["bark"] = "bow-wow"
DELETE PROPERTIES OBJECT
// Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

delete myDog.tails;
// Only change code below this line

UPDATE PROPERTIES VALUE
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog.name="Happy Coder";

TESTING IF AN OBJECT HAS A PROPERTY
const myObj = {
  top: "hat",
  bottom: "pants"
};

myObj.hasOwnProperty("top");
myObj.hasOwnProperty("middle");

MANIPULATE COMPLEX OBJECTS
const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
  {
    "artist": "Joel",
    "title": " Man",
    "release_year": 1999,
    "formats": [
      "MP3",
      "MP4",
      "N45"
    ],
    
  }
];

ASSESSING NESTED OBJECTS

const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

const gloveBoxContents = myStorage.car.inside["glove box"];

ASSESSING NESTED ARRAYS
const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1];
RECORD COLLECTION

// Setup
const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  console.log(id+ prop+ value)
if(prop!='tracks'&&value.length>0)
{
  console.log("entra1")
records[id][prop]=value;
}
else if(prop=='tracks'&&records[id].hasOwnProperty(prop)&&value.length>0)
{
 
  console.log("entra3")
 
records[id][prop].push(value);
}

else if(prop=='tracks'&&!records[id].hasOwnProperty('prop')&&value.length>0)
{
    console.log("entra2")
  var z=[];
  z.push(value);
  console.log(z);
records[id][prop]=z;
  console.log(records);
}

else if(value.length==0)
{
  console.log("entra4")
delete records[id][prop];
}

  return records;
}

updateRecords(recordCollection, 5439, 'artist', 'ABBA');

WHILE LOOP

const ourArray = [];
let i = 0;

while (i < 5) {
  ourArray.push(i);
  i++;
}


FOR LOOOP

const ourArray = [];

for (let i = 0; i < 5; i++) {
  ourArray.push(i);
}

NESTING LOOPS
const arr = [
  [1, 2], [3, 4], [5, 6]
];

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}
DO WHILE LOOPS

const ourArray = [];
let i = 0;

do {
  ourArray.push(i);
  i++;
} while (i < 5);

MATH RANDOM

  // Only change code below this line
 
  return  Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}

PARSE INT  convert string to Integer

--you can convert a string of numbers  binary to integer

  // Only change code below this line
 
  return  Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}

TERNARY OPERATORS
EX1
function checkEqual(a, b) {
 return a ==b ? "Equal" : "Not Equal";
}

checkEqual(1, 2);

EX2
function checkSign(num) {
 return (num>0) ? "positive" 
    : (num<0) ? "negative" 
    : "zero";
}

checkSign(10);

RECURSSION
BASIC RECURSSION

--Count up
function countUp(n) {
    if (n<1) {
      return [];
    } else {
         
      const countArray = countUp(n-1);
     
      countArray.push(n);
var removedValue=countArray.pop();
    countArray.unshift(removedValue);
      return countArray;
    }
  }
  console.log(countUp( 5));
  
  --Count Down
  function countDown(n) {
    if (n<1) {
      return [];
    } else {
         
      const countArray = countDown(n-1);
     
      countArray.push(n);

      return countArray;
    }
  }
  console.log(countDown( 5));
  
 -- Count between a range of numbers

function rangeOfNumbers(startNum, endNum) {
   if (endNum<startNum) {
      return [];
    } else {
         
      const countArray = rangeOfNumbers(startNum,endNum-1);
     
      countArray.push(endNum);
    
      return countArray;
    }
}

DIFFERENCES BETWEEN VAR AND LET
VAR IS GLOBAL - LET IS FOR LOCAL FUNCTIONS.
function checkScope() {
 let i = 'function scope';
  if (true) {
   let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}

CONST IS IN IMMUTABLE BUT FOR ARRAYS IT WORKS DIFFERENT YOU CAN NOT CHANGE THE ENTIRE VALUE BUT YOU CAN CHANGE BY INDEXES
const s = [5, 7, 2];
function editInPlace() {
  // Only change code below this line
s[0]=2;
s[1]=5;
s[2]=7;
  // Using s = [2, 5, 7] would be invalid

  // Only change code above this line
}
editInPlace();

PREVENTS OBJECTS MUTATION

function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // Only change code below this line
Object.freeze(MATH_CONSTANTS);

  // Only change code above this line
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();

ARROW FUNCTION
MANY STATEMENTS
const myFunc = function() {
  const myVar = "value";
  return myVar;
}

TO THIS

const myFunc = () => {
  const myVar = "value";
  return myVar;
}



OR 
ONLY REURN STATEMENT
var magic = function() {
  return new Date();
};

TO THIS

const magic = () => new Date();

EXAMPLE.2 
WITH PARAMETERS
const myConcat = (arr1, arr2)=> arr1.concat(arr2);

console.log(myConcat([1, 2], [3, 4, 5]));

EX.3 
INTRODUCE A DEFAULT VALUE IN PARAMETERS
// Only change code below this line
const increment = (number, value=1) => number + value;
// Only change code above this line

