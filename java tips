let- not mutable variable camel case 
var- variable mutable camel case
const- not mutable uppercase

increment i++
decrement i--

augmented additon +=
augmented subtracts -=
augmented multiplication *=
augmented division /=

Double quotes

" string"
"string   \*quotes\* in it"

if you use '' you do not need back slashes.

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed

+= can be used with strings too.
you can concatenate variables inside a string.

string has .length to return string length
you can access string positions using brackets[0]
you can not change string values because they are inmutables, you must change all the 
GET last value of the string
const lastLetter = firstName[firstName.length - 1];

arrays mutables values indexable

const sandwich = ["peanut butter", "jelly", "bread"];
array.push(value)add value to the end of the array
array.unshift(value)add value to the first position
array.pop()delete value in the last position
array.shift()delete value in the first position


functions
Assign
function functionsUse(){
console.log("My Function");
}
Call
functionUse();

function with arguments
function functionWithArgs(sum1,sum2)
{
  console.log(sum1+sum2);
}

functionWithArgs(2,4);

function with return value
function timesFive(num){
  return num*5;
}

global variables

use const or let, put it at the beginning of the code, not inside any function.


you can assign an operation of a function to a variable.

FUNCTION CAN RETURN OR NOT VALUES

-The ones that not return, return data undefined.
-The ones that return, returns value assigned

SWITCH STATEMENT
switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}

IF- ELSE IF -ELSE
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}

END A FUNCTION WITH A RETURN STATEMENT 
// Setup
function abTest(a, b) {
  // Only change code below this line

if (a<0||b<0)
{
  return undefined;
}

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);

ASSESSING OBJECT PROPERTIES WITH BRACKETS NOTATION
const myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock",
  "NoSpace": "USS Enterprise"
};

myObj["Space Name"];
myObj['More Space'];
myObj["NoSpace"];

ADD  PROPERTIE TO OBJECT
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog["bark"] = "bow-wow"
DELETE PROPERTIES OBJECT
// Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

delete myDog.tails;
// Only change code below this line

UPDATE PROPERTIES VALUE
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog.name="Happy Coder";

TESTING IF AN OBJECT HAS A PROPERTY
const myObj = {
  top: "hat",
  bottom: "pants"
};

myObj.hasOwnProperty("top");
myObj.hasOwnProperty("middle");

MANIPULATE COMPLEX OBJECTS
const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
  {
    "artist": "Joel",
    "title": " Man",
    "release_year": 1999,
    "formats": [
      "MP3",
      "MP4",
      "N45"
    ],
    
  }
];

ASSESSING NESTED OBJECTS

const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

const gloveBoxContents = myStorage.car.inside["glove box"];

ASSESSING NESTED ARRAYS
const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1];
RECORD COLLECTION

// Setup
const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  console.log(id+ prop+ value)
if(prop!='tracks'&&value.length>0)
{
  console.log("entra1")
records[id][prop]=value;
}
else if(prop=='tracks'&&records[id].hasOwnProperty(prop)&&value.length>0)
{
 
  console.log("entra3")
 
records[id][prop].push(value);
}

else if(prop=='tracks'&&!records[id].hasOwnProperty('prop')&&value.length>0)
{
    console.log("entra2")
  var z=[];
  z.push(value);
  console.log(z);
records[id][prop]=z;
  console.log(records);
}

else if(value.length==0)
{
  console.log("entra4")
delete records[id][prop];
}

  return records;
}

updateRecords(recordCollection, 5439, 'artist', 'ABBA');

WHILE LOOP

const ourArray = [];
let i = 0;

while (i < 5) {
  ourArray.push(i);
  i++;
}


FOR LOOOP

const ourArray = [];

for (let i = 0; i < 5; i++) {
  ourArray.push(i);
}

NESTING LOOPS
const arr = [
  [1, 2], [3, 4], [5, 6]
];

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}
DO WHILE LOOPS

const ourArray = [];
let i = 0;

do {
  ourArray.push(i);
  i++;
} while (i < 5);

MATH RANDOM

  // Only change code below this line
 
  return  Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}

PARSE INT  convert string to Integer

--you can convert a string of numbers  binary to integer

  // Only change code below this line
 
  return  Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}

TERNARY OPERATORS
EX1
function checkEqual(a, b) {
 return a ==b ? "Equal" : "Not Equal";
}

checkEqual(1, 2);

EX2
function checkSign(num) {
 return (num>0) ? "positive" 
    : (num<0) ? "negative" 
    : "zero";
}

checkSign(10);

RECURSSION
BASIC RECURSSION

--Count up
function countUp(n) {
    if (n<1) {
      return [];
    } else {
         
      const countArray = countUp(n-1);
     
      countArray.push(n);
var removedValue=countArray.pop();
    countArray.unshift(removedValue);
      return countArray;
    }
  }
  console.log(countUp( 5));
  
  --Count Down
  function countDown(n) {
    if (n<1) {
      return [];
    } else {
         
      const countArray = countDown(n-1);
     
      countArray.push(n);

      return countArray;
    }
  }
  console.log(countDown( 5));
  
 -- Count between a range of numbers

function rangeOfNumbers(startNum, endNum) {
   if (endNum<startNum) {
      return [];
    } else {
         
      const countArray = rangeOfNumbers(startNum,endNum-1);
     
      countArray.push(endNum);
    
      return countArray;
    }
}

DIFFERENCES BETWEEN VAR AND LET
VAR IS GLOBAL - LET IS FOR LOCAL FUNCTIONS.
function checkScope() {
 let i = 'function scope';
  if (true) {
   let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}

CONST IS IN IMMUTABLE BUT FOR ARRAYS IT WORKS DIFFERENT YOU CAN NOT CHANGE THE ENTIRE VALUE BUT YOU CAN CHANGE BY INDEXES
const s = [5, 7, 2];
function editInPlace() {
  // Only change code below this line
s[0]=2;
s[1]=5;
s[2]=7;
  // Using s = [2, 5, 7] would be invalid

  // Only change code above this line
}
editInPlace();

PREVENTS OBJECTS MUTATION

function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // Only change code below this line
Object.freeze(MATH_CONSTANTS);

  // Only change code above this line
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();

ARROW FUNCTION
MANY STATEMENTS
const myFunc = function() {
  const myVar = "value";
  return myVar;
}

TO THIS

const myFunc = () => {
  const myVar = "value";
  return myVar;
}



OR 
ONLY REURN STATEMENT
var magic = function() {
  return new Date();
};

TO THIS

const magic = () => new Date();

EXAMPLE.2 
WITH PARAMETERS
const myConcat = (arr1, arr2)=> arr1.concat(arr2);

console.log(myConcat([1, 2], [3, 4, 5]));

EX.3 
INTRODUCE A DEFAULT VALUE IN PARAMETERS
// Only change code below this line
const increment = (number, value=1) => number + value;
// Only change code above this line

REST PARAMETERS IN FUNCTION PARAMETERS
-IF YOU DON'T KNOW THE SIDE OF THE ARRAY AND NEED TO USE ALL THE ELEMENTS YOU CAN USE THE REST PARAMETERS
const sum = (...args) => {


  return args.reduce((a, b) => a + b, 0);
}

SPREAD OPERATOR TO COPY AN ARRAY IN OTHER ARRAY

const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;

arr2 = [...arr1];  // Change this line

console.log(arr2);

EXTRACTING VALUES FROM OBJECTS

const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line

const {today, tomorrow} = HIGH_TEMPERATURES;

// Only change code above this line

DESTRUCTURING: EXTRACTING VALUES AND ASSIGNING TO VARIABLES

const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line
  
const {today:highToday,tomorrow: highTomorrow} = HIGH_TEMPERATURES; 

// Only change code above this line

DESTRUCTURING: EXTRACTING VALUES AND ASSIGNING TO VARIABLES FROM A NESTED OBJECT

const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};

// Only change code below this line
  


const{ today:{low:lowToday,high:highToday}}=LOCAL_FORECAST;

--Create Strings using Template Literals

const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr) {
  // Only change code below this line
  const failureItems = [];
  for(let i=0;i<arr.length;i++)
  {
failureItems.push(`<li class="text-warning">${arr[i]}</li>`)
  }

  // Only change code above this line

  return failureItems;
}

const failuresList = makeList(result.failure);

// Only change code above this line

--Use Destructuring Assignment to Assign Variables from Arrays

let a = 8, b = 6;
// Only change code below this line
[a, b] = [b, a];

--Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements

const source = [1,2,3,4,5,6,7,8,9,10];
function removeFirstTwo(list) {
  // Only change code below this line result expected (arr should be [3,4,5,6,7,8,9,10])
  const[,, ...arr]  =list ; // Change this line
  // Only change code above this line
  return arr;
}
const arr = removeFirstTwo(source);

--Use Destructuring Assignment to Pass an Object as a Function's Parameters

const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};

// Only change code below this line
const half = ({max,min}) => {
  
  return(max + min) / 2.0; 
}
// Only change code above this line

--Write Concise Object Literal Declarations Using Object Property Shorthand
const createPerson = (name, age, gender) => ({name,age,gender});

--Write Concise Declarative Functions with ES6

// Only change code below this line
const bicycle = {
  gear: 2,
  setGear (newGear) {
    this.gear = newGear;
  }
};
// Only change code above this line
bicycle.setGear(3);
console.log(bicycle.gear);

--Use class Syntax to Define a Constructor Function

// Only change code below this line
class Vegetable{
  constructor(name){
    this.name=name;
  }
}

--Use getters and setters to Control Access to an Object

// Only change code below this line
class Thermostat {
  constructor(temperature) {
    this._temperature = temperature;
  }
  // getter RETURN CELSIUS
  get temperature() {
    
      return 5/9 * (this._temperature - 32);
  }
   

  // setter RETURN FARENHEITS
  set temperature(temp) {
temp=temp * 9.0 / 5 + 32;
this._temperature= temp;
  }
}
// Only change code above this line

const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius
// Only change code above this line

const carrot = new Vegetable('carrot');
console.log(carrot.name); // Should display 'carrot'

EXPORT FUNCTIONS TO USE IN OTHER FILES

const uppercaseString = (string) => {
  return string.toUpperCase();
}

const lowercaseString = (string) => {
  return string.toLowerCase()
}

export{uppercaseString,lowercaseString};

IMPORT FUNCTIONS TO USE THEM IN OTHER FILES

  import {uppercaseString,lowercaseString} from './string_functions.js';
// Only change code above this line

uppercaseString("hello");
lowercaseString("WORLD!");

IMPORT EVERY FUNCTION IN OTHER FILE
import * as stringFunctions from './string_functions.js';
// Only change code above this line

stringFunctions.uppercaseString("hello");
stringFunctions.lowercaseString("WORLD!");

--Create an Export Fallback with export default

export default function subtract(x, y) {
  return x - y;
}

WHEN YOU IMPORT A DEFAULT FUNCTION YOU  GIVE ANY NAME YOU WANT TO THE VARIABLE AND IT WILL TAKE THE DEFAULT VALUE
  import subtract from './math_functions.js';
// Only change code above this line

subtract(7,4);

CREATE A PROMISE 

const makeServerRequest = new Promise((resolve, reject) => {

});

PROMISE ARGUMENTS USE
const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer represents a response from a server
  let responseFromServer;
    
  if(responseFromServer) {
    // Change this line
    resolve ("We got the data");
  } else {  
    // Change this line
      reject("Data not received");
  }
});

--Handle a Fulfilled Promise with then (WHEN THE PROMISE IS SUCCESFUL 'THEN' SHOW CORRECT MESSAGE )

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to true to represent a successful response from a server
  let responseFromServer = true;
    
  if(responseFromServer) {
    resolve("We got the data");

    makeServerRequest.then(result => {
  console.log(result);
});
  } else {  
    reject("Data not received");
  }
});

WHEN THE PROMISE IS NOT COMPPLETED USE 'CATCH' TO SHOW ERROR

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);
});

makeServerRequest.catch(error => {
  console.log(error);
});

TEST METHOD

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); // Change this line

THE TEST METHOD TEST TO FIND THE EXACT WORD

let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
let waldoRegex = /Waldo/; // Change this line
let result = waldoRegex.test(waldoIsHiding);

TEST MULTIPLE WORDS
let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);

WHEN YOU NEED TO FIND A WORD AND IT DOES NOT MATTER THE CASE USE THE (IGNORE CASE 'i')
let myString = "freeCodeCamp";
let fccRegex = /freeCodeCamp/i; // Change this line
let result = fccRegex.test(myString);

TEST METHOD (return true or false) OPPOSITE SYNTAX METHOD IS MATCH (return the matches)

let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; // Change this line
let result = extractStr.match(codingRegex); // Change this line

TO FIND MORE THAN ONE MATCH YOU CAN USE GLOBAL SEARCH FLAG ('g') ALSO YOU CAN COMBINE CASES LIKE IGNORE AND GLOBAL SEARCH

let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line

let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /TWINKLE/gi; // Change this line
let result = twinkleStar.match(starRegex); // Change this line
WHEN YOU NEED TO MATCH A WORD THAT BEGIN WITH SPECIFIC LETTER BUT ENDS IN ANY WORD OR THE OPPORSITE YOU CAN USE THE WILDCARD PERIOD

let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /.un/; // Change this line
let result = unRegex.test(exampleStr);

FIND MULTIPLE SPECIFIC CHARACTERS  
let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line

FIND THE MATCHES BETWEEN A RANGE OF LETTERS

let quoteSample = "The quick brown fox jumps over the lazy dog.";
let alphabetRegex = /[a-z]/gi; // Change this line
let result = quoteSample.match(alphabetRegex); // Change this line

MATCH NUMBER AND LETTERS AT THE SAME TIME

let quoteSample = "Blueberry 3.141592653s are delicious.";
let myRegex = /[H-S2-6]/ig; // Change this line
let result = quoteSample.match(myRegex); // Change this line

MATCH THE CHARACTERS THAT YOU DO NOT WANT TO FIND

let quoteSample = "3 blind mice.";
let myRegex = /[^aeiou1-9]/gi; // Change this line
let result = quoteSample.match(myRegex); // Change this line

--Match Characters that Occur One or More Times
let difficultSpelling = "Mississippi";
let myRegex = /S+/gi; // Change this line
let result = difficultSpelling.match(myRegex);

--Match Characters that Occur Zero or More Times

// Only change code below this line
let chewieRegex = /Aa*/; // Change this line
// Only change code above this line

let result = chewieQuote.match(chewieRegex);

FIND THE MIN SUBSTRING THAT ACCOMPLISH A CONDITION

find <h1>
let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?1>/; // Change this line
let result = text.match(myRegex);

EXAMPLE FIND CRIMINAL REPRESENTED WITH 'C' EVEN IF IT IS ONE OR MORE
let reCriminals = /CC*/g; // Change this line

--Match Beginning String Patterns

let rickyAndCal = "Cal and Ricky both like racing.";
let calRegex = /^Cal/; // Change this line
let result = calRegex.test(rickyAndCal);

--Match Ending String Patterns

let caboose = "The last car on a train is the caboose";
let lastRegex = /caboose$/; // Change this line
let result = lastRegex.test(caboose);

--Match All Letters and Numbers

let quoteSample = "The five boxing wizards jump quickly.";
let alphabetRegexV2 = /\w/g; // Change this line
let result = quoteSample.match(alphabetRegexV2).length;

--Match Everything But Letters and Numbers
let quoteSample = "The five boxing wizards jump quickly.";
let nonAlphabetRegex = /\W/g; // Change this line
let result = quoteSample.match(nonAlphabetRegex).length;

MATCH ALL NUMBERS
let movieName = "2001: A Space Odyssey";
let numRegex = /\d/g; // Change this line
let result = movieName.match(numRegex).length;

NON DIGITS
let movieName = "2001: A Space Odyssey";
let noNumRegex = /\D/g; // Change this line
let result = movieName.match(noNumRegex).length;

EX RESTRICT USERNAMES

let username = "JackOfAllTrades";
let userCheck = /^[a-z][a-z]+[0-9]*$|^[a-z]\d\d+$/i; // Change this line
let result = userCheck.test(username);

--Match Whitespace

let sample = "Whitespace is important in separating words";
let countWhiteSpace = /\s/g; // Change this line
let result = sample.match(countWhiteSpace);

-- MATCH NOT WHITESPACES

let sample = "Whitespace is important in separating words";
let countNonWhiteSpace = /\S/g; // Change this line
let result = sample.match(countNonWhiteSpace);

--Specify Upper and Lower Number of Matches

let ohStr = "Ohhh no";
let ohRegex = /Oh{3,6} no/; // Change this line
let result = ohRegex.test(ohStr);

--Specify Only the Lower Number of Matches

let haStr = "Hazzzzah";
let haRegex = /Haz{4,}ah/; // Change this line
let result = haRegex.test(haStr);

Specify Exact Number of Matches

let timStr = "Timmmmber";
let timRegex = /Tim{4}ber/; // Change this line
let result = timRegex.test(timStr);
