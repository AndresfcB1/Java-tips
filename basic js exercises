

--Convert Celsius to Fahrenheit

function convertCtoF(celsius) {
  let fahrenheit;
  return fahrenheit=(celsius*9/5)+32;
}

convertCtoF(30);

--Reverse a 


function reverseString(str) {
  return str.split('').reverse().join('');
}

reverseString("hello");


FACTORIAL WITH RECURSSION

function factorialize(num) {

  var multiply=1;
    if (num<=1) {
       return 1;
     } else {
          
       const n = factorialize(num-1);
    multiply=n*(num);
    
     }
   return multiply;
 }

factorialize(5);

FIND THE LONGEST WORD IN THE STRING

function findLongestWordLength(str) {
 var contador=0;
    var count=0;
      for(let i=0; i<str.length;i++)
      {
      
        count++;
        if(str[i]==' ')
        {
            
          count--;
          if(contador<count)
          {
            contador=count;
            count=0;
          }
          count=0;
        }
        else if(contador<count)
        {
          contador=count;
          
        }

      }
  
      return contador;
    }

findLongestWordLength("The quick brown fox jumped over the lazy dog");

RETURN LARGEST NUMBER IN ARRAY

function largestOfFour(arr) {
var arr2=[];
  for(let i=0;i<arr.length;i++)
  {
    var maxNum=Math.max(...arr[i]);
    arr2.push(maxNum);
  }
  return arr2;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

--Confirm the Ending

function confirmEnding(str, target) {

var z=str.length-target.length;
var m="";

for(let i=z;i<str.length;i++ )
{
m=m+str[i];
}
if(m==target)
{
  return true;
}
 else 
 {
   return false;
 }
 
}


confirmEnding("Bastian", "n");

OR

function confirmEnding(str, target) {

  return str.slice(-target.length) === target
 
}


confirmEnding("Bastian", "n");

REPEAT STRING N TIMES

function repeatStringNumTimes(str, num) {
 var a="";
  
  for(let i=0; i<num; i++)
  {
   
   a+=str;
    
  }
 
  return a;
}

repeatStringNumTimes("abc", 3);

RETURN STRING WITH ... IF THE TARGET LENGTH IS LESS THAN STRING.LENGTH

function truncateString(str, num) {


  return str.length>num?
   str.slice(0,num)+"..."
   :str;
 
}

truncateString("A-tisket a-tasket A green and yellow basket", 8);

FINDER KEEPERS

function findElement(arr, func) {
 
  for(let i=0; i<arr.length;i++)
  {
    var num=arr[i];
    if (func(num))
    {return num;}
  }
  return undefined;
}

findElement([1, 2, 3, 4], num => num % 2 === 0);

--Classified as a boolean primitive

function booWho(bool) {
  
  return bool===true|bool===false?true:false;
}

booWho(null);

--Capitalize first character
function titleCase(str) {
var stro=str.toLowerCase();
    const arr = stro.split(" ");

    
    
    
    for (var i = 0; i < arr.length; i++) {
        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);
    
    }
 
    const str2 = arr.join(" ");
    console.log(str2);
    return str2;
}
  
  titleCase("I'm a little tea pot");
  
  SLICE AND SPLICE
  
  function frankenSplice(arr1, arr2, n) {
  var arr4=[];
  arr4.push(...arr2);
  var arr3=arr4.splice(0,n);
arr3.push(...arr1);
arr3.push(...arr4)

  console.log(arr3);
  return arr3;
}

frankenSplice([1, 2, 3], [4, 5, 6], 1);

FALSY BOUNCER
function bouncer(arr) {
  let newArray = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) newArray.push(arr[i]);
  }
  return newArray;
}

bouncer([false, null, 0, NaN, undefined, ""]);

FIND THE INDEX WHERE WAS PUSHED A NUMBER

function getIndexToIns(arr, num) {
  arr.push(num);
  arr.sort((a, b) => a - b);
  for(let i=0;i<arr.length;i++)
  {
    if(arr[i]==num)
    {
      num=i;
      return i;
    }
  }

  return arr.length;
}

getIndexToIns([40, 60], 500);


VERIFY IF LETTER OF ONE ARRAY ARE IN OTHER ARRAY

function mutation(arr) {
  let test = arr[1].toLowerCase();
  let target = arr[0].toLowerCase();
  for (let i = 0; i < test.length; i++) {
    if (target.indexOf(test[i]) < 0) return false;
  }
  return true;
}

--Chunky Monkey

function chunkArrayInGroups(arr, size) {
var z=[];
  
 while(arr.length>0)
 {
      var arr3=[];
arr3=[arr.splice(0,size)];


z.push(...arr3);
console.log(z)
 }

  return z;
}

chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2);
