
--Create Strings using Template Literals

const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr) {
  // Only change code below this line
  const failureItems = [];
  for(let i=0;i<arr.length;i++)
  {
failureItems.push(`<li class="text-warning">${arr[i]}</li>`)
  }

  // Only change code above this line

  return failureItems;
}

const failuresList = makeList(result.failure);

--string methods


TEST METHOD

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); // Change this line

THE TEST METHOD TEST TO FIND THE EXACT WORD

let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
let waldoRegex = /Waldo/; // Change this line
let result = waldoRegex.test(waldoIsHiding);

TEST MULTIPLE WORDS
let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);

WHEN YOU NEED TO FIND A WORD AND IT DOES NOT MATTER THE CASE USE THE (IGNORE CASE 'i')
let myString = "freeCodeCamp";
let fccRegex = /freeCodeCamp/i; // Change this line
let result = fccRegex.test(myString);

TEST METHOD (return true or false) OPPOSITE SYNTAX METHOD IS MATCH (return the matches)

let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; // Change this line
let result = extractStr.match(codingRegex); // Change this line

TO FIND MORE THAN ONE MATCH YOU CAN USE GLOBAL SEARCH FLAG ('g') ALSO YOU CAN COMBINE CASES LIKE IGNORE AND GLOBAL SEARCH

let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line

let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /TWINKLE/gi; // Change this line
let result = twinkleStar.match(starRegex); // Change this line
WHEN YOU NEED TO MATCH A WORD THAT BEGIN WITH SPECIFIC LETTER BUT ENDS IN ANY WORD OR THE OPPORSITE YOU CAN USE THE WILDCARD PERIOD

let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /.un/; // Change this line
let result = unRegex.test(exampleStr);

FIND MULTIPLE SPECIFIC CHARACTERS  
let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line

FIND THE MATCHES BETWEEN A RANGE OF LETTERS

let quoteSample = "The quick brown fox jumps over the lazy dog.";
let alphabetRegex = /[a-z]/gi; // Change this line
let result = quoteSample.match(alphabetRegex); // Change this line

MATCH NUMBER AND LETTERS AT THE SAME TIME

let quoteSample = "Blueberry 3.141592653s are delicious.";
let myRegex = /[H-S2-6]/ig; // Change this line
let result = quoteSample.match(myRegex); // Change this line

MATCH THE CHARACTERS THAT YOU DO NOT WANT TO FIND

let quoteSample = "3 blind mice.";
let myRegex = /[^aeiou1-9]/gi; // Change this line
let result = quoteSample.match(myRegex); // Change this line

--Match Characters that Occur One or More Times
let difficultSpelling = "Mississippi";
let myRegex = /S+/gi; // Change this line
let result = difficultSpelling.match(myRegex);

--Match Characters that Occur Zero or More Times

// Only change code below this line
let chewieRegex = /Aa*/; // Change this line
// Only change code above this line

let result = chewieQuote.match(chewieRegex);

FIND THE MIN SUBSTRING THAT ACCOMPLISH A CONDITION

find <h1>
let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?1>/; // Change this line
let result = text.match(myRegex);

EXAMPLE FIND CRIMINAL REPRESENTED WITH 'C' EVEN IF IT IS ONE OR MORE
let reCriminals = /CC*/g; // Change this line

--Match Beginning String Patterns

let rickyAndCal = "Cal and Ricky both like racing.";
let calRegex = /^Cal/; // Change this line
let result = calRegex.test(rickyAndCal);

--Match Ending String Patterns

let caboose = "The last car on a train is the caboose";
let lastRegex = /caboose$/; // Change this line
let result = lastRegex.test(caboose);

--Match All Letters and Numbers

let quoteSample = "The five boxing wizards jump quickly.";
let alphabetRegexV2 = /\w/g; // Change this line
let result = quoteSample.match(alphabetRegexV2).length;

--Match Everything But Letters and Numbers
let quoteSample = "The five boxing wizards jump quickly.";
let nonAlphabetRegex = /\W/g; // Change this line
let result = quoteSample.match(nonAlphabetRegex).length;

MATCH ALL NUMBERS
let movieName = "2001: A Space Odyssey";
let numRegex = /\d/g; // Change this line
let result = movieName.match(numRegex).length;

NON DIGITS
let movieName = "2001: A Space Odyssey";
let noNumRegex = /\D/g; // Change this line
let result = movieName.match(noNumRegex).length;

EX RESTRICT USERNAMES

let username = "JackOfAllTrades";
let userCheck = /^[a-z][a-z]+[0-9]*$|^[a-z]\d\d+$/i; // Change this line
let result = userCheck.test(username);

--Match Whitespace

let sample = "Whitespace is important in separating words";
let countWhiteSpace = /\s/g; // Change this line
let result = sample.match(countWhiteSpace);

-- MATCH NOT WHITESPACES

let sample = "Whitespace is important in separating words";
let countNonWhiteSpace = /\S/g; // Change this line
let result = sample.match(countNonWhiteSpace);

--Specify Upper and Lower Number of Matches

let ohStr = "Ohhh no";
let ohRegex = /Oh{3,6} no/; // Change this line
let result = ohRegex.test(ohStr);

--Specify Only the Lower Number of Matches

let haStr = "Hazzzzah";
let haRegex = /Haz{4,}ah/; // Change this line
let result = haRegex.test(haStr);

Specify Exact Number of Matches

let timStr = "Timmmmber";
let timRegex = /Tim{4}ber/; // Change this line
let result = timRegex.test(timStr);

Check for All or None
 THE PRECEEDING CHARACTER BECOMES OPTIONAL AND VERIFY MATCHES WITH IT AND WITHOUT IT 
 
 let favWord = "favorite";
let favRegex = /favou?rite/; // Change this line
let result = favRegex.test(favWord);

--Positive and Negative Lookahead
let sampleWord = "astronaut";
let pwRegex = /(?=\w{6,})(?=\D*\d{2})/; // Change this line
let result = pwRegex.test(sampleWord);

--Check For Mixed Grouping of Characters

let myString = "Eleanor Roosevelt";
let myRegex = /(Franklin|Eleanor)+.*?Roosevelt/i; // Change this line
let result = myRegex.test(myString); // Change this line
// After passing the challenge experiment with myString and see how the grouping works

--Reuse Patterns Using Capture Groups

let repeatNum = "42 42 42";
let reRegex = /^(\d+)\s\1\s\1$/; // Change this line
let result = reRegex.test(repeatNum);

--Use Capture Groups to Search and Replace

let str = "one two three";
let fixRegex = /(\w+)\s(\w+)\s(\w+)/; // Change this line
let replaceText = '$3 $2 $1'; // Change this line
let result = str.replace(fixRegex, replaceText);

--Remove Whitespace from Start and End

let hello = "   Hello, World!  ";
let wsRegex = /^\s+|\s+$/g; // Change this line
let result = hello.replace(wsRegex,""); // Change this line
console.log(result)
