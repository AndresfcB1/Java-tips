let- not mutable variable camel case 
var- variable mutable camel case
const- not mutable uppercase

increment i++
decrement i--

augmented additon +=
augmented subtracts -=
augmented multiplication *=
augmented division /=

Double quotes

" string"
"string   \*quotes\* in it"

if you use '' you do not need back slashes.

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed

+= can be used with strings too.
you can concatenate variables inside a string.

string has .length to return string length
you can access string positions using brackets[0]
you can not change string values because they are inmutables, you must change all the 
GET last value of the string
const lastLetter = firstName[firstName.length - 1];

arrays mutables values indexable

const sandwich = ["peanut butter", "jelly", "bread"];
array.push(value)add value to the end of the array
array.unshift(value)add value to the first position
array.pop()delete value in the last position
array.shift()delete value in the first position


functions
Assign
function functionsUse(){
console.log("My Function");
}
Call
functionUse();

function with arguments
function functionWithArgs(sum1,sum2)
{
  console.log(sum1+sum2);
}

functionWithArgs(2,4);

function with return value
function timesFive(num){
  return num*5;
}

global variables

use const or let, put it at the beginning of the code, not inside any function.


you can assign an operation of a function to a variable.

FUNCTION CAN RETURN OR NOT VALUES

-The ones that not return, return data undefined.
-The ones that return, returns value assigned

SWITCH STATEMENT
switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}

IF- ELSE IF -ELSE
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}

END A FUNCTION WITH A RETURN STATEMENT 
// Setup
function abTest(a, b) {
  // Only change code below this line

if (a<0||b<0)
{
  return undefined;
}

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);

ASSESSING OBJECT PROPERTIES WITH BRACKETS NOTATION
const myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock",
  "NoSpace": "USS Enterprise"
};

myObj["Space Name"];
myObj['More Space'];
myObj["NoSpace"];

ADD  PROPERTIE TO OBJECT
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog["bark"] = "bow-wow"
DELETE PROPERTIES OBJECT
// Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

delete myDog.tails;
// Only change code below this line

UPDATE PROPERTIES VALUE
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog.name="Happy Coder";

TESTING IF AN OBJECT HAS A PROPERTY
const myObj = {
  top: "hat",
  bottom: "pants"
};

myObj.hasOwnProperty("top");
myObj.hasOwnProperty("middle");

MANIPULATE COMPLEX OBJECTS
const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
  {
    "artist": "Joel",
    "title": " Man",
    "release_year": 1999,
    "formats": [
      "MP3",
      "MP4",
      "N45"
    ],
    
  }
];

ASSESSING NESTED OBJECTS

const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

const gloveBoxContents = myStorage.car.inside["glove box"];

ASSESSING NESTED ARRAYS
const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1];
RECORD COLLECTION

// Setup
const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  console.log(id+ prop+ value)
if(prop!='tracks'&&value.length>0)
{
  console.log("entra1")
records[id][prop]=value;
}
else if(prop=='tracks'&&records[id].hasOwnProperty(prop)&&value.length>0)
{
 
  console.log("entra3")
 
records[id][prop].push(value);
}

else if(prop=='tracks'&&!records[id].hasOwnProperty('prop')&&value.length>0)
{
    console.log("entra2")
  var z=[];
  z.push(value);
  console.log(z);
records[id][prop]=z;
  console.log(records);
}

else if(value.length==0)
{
  console.log("entra4")
delete records[id][prop];
}

  return records;
}

updateRecords(recordCollection, 5439, 'artist', 'ABBA');

WHILE LOOP

const ourArray = [];
let i = 0;

while (i < 5) {
  ourArray.push(i);
  i++;
}


FOR LOOOP

const ourArray = [];

for (let i = 0; i < 5; i++) {
  ourArray.push(i);
}

NESTING LOOPS
const arr = [
  [1, 2], [3, 4], [5, 6]
];

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}
DO WHILE LOOPS

const ourArray = [];
let i = 0;

do {
  ourArray.push(i);
  i++;
} while (i < 5);

MATH RANDOM

  // Only change code below this line
 
  return  Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}

PARSE INT  convert string to Integer

--you can convert a string of numbers  binary to integer

  // Only change code below this line
 
  return  Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}

TERNARY OPERATORS
EX1
function checkEqual(a, b) {
 return a ==b ? "Equal" : "Not Equal";
}

checkEqual(1, 2);

EX2
function checkSign(num) {
 return (num>0) ? "positive" 
    : (num<0) ? "negative" 
    : "zero";
}

checkSign(10);



BASIC RECURSSION

--Count up
function countUp(n) {
    if (n<1) {
      return [];
    } else {
         
      const countArray = countUp(n-1);
     
      countArray.push(n);
var removedValue=countArray.pop();
    countArray.unshift(removedValue);
      return countArray;
    }
  }
  console.log(countUp( 5));
  
  --Count Down
  function countDown(n) {
    if (n<1) {
      return [];
    } else {
         
      const countArray = countDown(n-1);
     
      countArray.push(n);

      return countArray;
    }
  }
  console.log(countDown( 5));
  
 -- Count between a range of numbers

function rangeOfNumbers(startNum, endNum) {
   if (endNum<startNum) {
      return [];
    } else {
         
      const countArray = rangeOfNumbers(startNum,endNum-1);
     
      countArray.push(endNum);
    
      return countArray;
    }
}

DIFFERENCES BETWEEN VAR AND LET
VAR IS GLOBAL - LET IS FOR LOCAL FUNCTIONS.
function checkScope() {
 let i = 'function scope';
  if (true) {
   let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}

CONST IS IN IMMUTABLE BUT FOR ARRAYS IT WORKS DIFFERENT YOU CAN NOT CHANGE THE ENTIRE VALUE BUT YOU CAN CHANGE BY INDEXES
const s = [5, 7, 2];
function editInPlace() {
  // Only change code below this line
s[0]=2;
s[1]=5;
s[2]=7;
  // Using s = [2, 5, 7] would be invalid

  // Only change code above this line
}
editInPlace();

PREVENTS OBJECTS MUTATION

function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // Only change code below this line
Object.freeze(MATH_CONSTANTS);

  // Only change code above this line
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();

ARROW FUNCTION
MANY STATEMENTS
const myFunc = function() {
  const myVar = "value";
  return myVar;
}

TO THIS

const myFunc = () => {
  const myVar = "value";
  return myVar;
}



OR 
ONLY REURN STATEMENT
var magic = function() {
  return new Date();
};

TO THIS

const magic = () => new Date();

EXAMPLE.2 
WITH PARAMETERS
const myConcat = (arr1, arr2)=> arr1.concat(arr2);

console.log(myConcat([1, 2], [3, 4, 5]));

EX.3 
INTRODUCE A DEFAULT VALUE IN PARAMETERS
// Only change code below this line
const increment = (number, value=1) => number + value;
// Only change code above this line

REST PARAMETERS IN FUNCTION PARAMETERS
-IF YOU DON'T KNOW THE SIDE OF THE ARRAY AND NEED TO USE ALL THE ELEMENTS YOU CAN USE THE REST PARAMETERS
const sum = (...args) => {


  return args.reduce((a, b) => a + b, 0);
}

SPREAD OPERATOR TO COPY AN ARRAY IN OTHER ARRAY

const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;

arr2 = [...arr1];  // Change this line

console.log(arr2);

EXTRACTING VALUES FROM OBJECTS

const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line

const {today, tomorrow} = HIGH_TEMPERATURES;

// Only change code above this line

DESTRUCTURING: EXTRACTING VALUES AND ASSIGNING TO VARIABLES

const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line
  
const {today:highToday,tomorrow: highTomorrow} = HIGH_TEMPERATURES; 

// Only change code above this line

DESTRUCTURING: EXTRACTING VALUES AND ASSIGNING TO VARIABLES FROM A NESTED OBJECT

const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};

// Only change code below this line
  


const{ today:{low:lowToday,high:highToday}}=LOCAL_FORECAST;

--Create Strings using Template Literals

const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr) {
  // Only change code below this line
  const failureItems = [];
  for(let i=0;i<arr.length;i++)
  {
failureItems.push(`<li class="text-warning">${arr[i]}</li>`)
  }

  // Only change code above this line

  return failureItems;
}

const failuresList = makeList(result.failure);

// Only change code above this line

--Use Destructuring Assignment to Assign Variables from Arrays

let a = 8, b = 6;
// Only change code below this line
[a, b] = [b, a];

--Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements

const source = [1,2,3,4,5,6,7,8,9,10];
function removeFirstTwo(list) {
  // Only change code below this line result expected (arr should be [3,4,5,6,7,8,9,10])
  const[,, ...arr]  =list ; // Change this line
  // Only change code above this line
  return arr;
}
const arr = removeFirstTwo(source);

--Use Destructuring Assignment to Pass an Object as a Function's Parameters

const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};

// Only change code below this line
const half = ({max,min}) => {
  
  return(max + min) / 2.0; 
}
// Only change code above this line

--Write Concise Object Literal Declarations Using Object Property Shorthand
const createPerson = (name, age, gender) => ({name,age,gender});

--Write Concise Declarative Functions with ES6

// Only change code below this line
const bicycle = {
  gear: 2,
  setGear (newGear) {
    this.gear = newGear;
  }
};
// Only change code above this line
bicycle.setGear(3);
console.log(bicycle.gear);

--Use class Syntax to Define a Constructor Function

// Only change code below this line
class Vegetable{
  constructor(name){
    this.name=name;
  }
}

--Use getters and setters to Control Access to an Object

// Only change code below this line
class Thermostat {
  constructor(temperature) {
    this._temperature = temperature;
  }
  // getter RETURN CELSIUS
  get temperature() {
    
      return 5/9 * (this._temperature - 32);
  }
   

  // setter RETURN FARENHEITS
  set temperature(temp) {
temp=temp * 9.0 / 5 + 32;
this._temperature= temp;
  }
}
// Only change code above this line

const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius
// Only change code above this line

const carrot = new Vegetable('carrot');
console.log(carrot.name); // Should display 'carrot'

EXPORT FUNCTIONS TO USE IN OTHER FILES

const uppercaseString = (string) => {
  return string.toUpperCase();
}

const lowercaseString = (string) => {
  return string.toLowerCase()
}

export{uppercaseString,lowercaseString};

IMPORT FUNCTIONS TO USE THEM IN OTHER FILES

  import {uppercaseString,lowercaseString} from './string_functions.js';
// Only change code above this line

uppercaseString("hello");
lowercaseString("WORLD!");

IMPORT EVERY FUNCTION IN OTHER FILE
import * as stringFunctions from './string_functions.js';
// Only change code above this line

stringFunctions.uppercaseString("hello");
stringFunctions.lowercaseString("WORLD!");

--Create an Export Fallback with export default

export default function subtract(x, y) {
  return x - y;
}

WHEN YOU IMPORT A DEFAULT FUNCTION YOU  GIVE ANY NAME YOU WANT TO THE VARIABLE AND IT WILL TAKE THE DEFAULT VALUE
  import subtract from './math_functions.js';
// Only change code above this line

subtract(7,4);

CREATE A PROMISE 

const makeServerRequest = new Promise((resolve, reject) => {

});

PROMISE ARGUMENTS USE
const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer represents a response from a server
  let responseFromServer;
    
  if(responseFromServer) {
    // Change this line
    resolve ("We got the data");
  } else {  
    // Change this line
      reject("Data not received");
  }
});

--Handle a Fulfilled Promise with then (WHEN THE PROMISE IS SUCCESFUL 'THEN' SHOW CORRECT MESSAGE )

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to true to represent a successful response from a server
  let responseFromServer = true;
    
  if(responseFromServer) {
    resolve("We got the data");

    makeServerRequest.then(result => {
  console.log(result);
});
  } else {  
    reject("Data not received");
  }
});

WHEN THE PROMISE IS NOT COMPPLETED USE 'CATCH' TO SHOW ERROR

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);
});

makeServerRequest.catch(error => {
  console.log(error);
});

TEST METHOD

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); // Change this line

THE TEST METHOD TEST TO FIND THE EXACT WORD

let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
let waldoRegex = /Waldo/; // Change this line
let result = waldoRegex.test(waldoIsHiding);

TEST MULTIPLE WORDS
let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);

WHEN YOU NEED TO FIND A WORD AND IT DOES NOT MATTER THE CASE USE THE (IGNORE CASE 'i')
let myString = "freeCodeCamp";
let fccRegex = /freeCodeCamp/i; // Change this line
let result = fccRegex.test(myString);

TEST METHOD (return true or false) OPPOSITE SYNTAX METHOD IS MATCH (return the matches)

let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; // Change this line
let result = extractStr.match(codingRegex); // Change this line

TO FIND MORE THAN ONE MATCH YOU CAN USE GLOBAL SEARCH FLAG ('g') ALSO YOU CAN COMBINE CASES LIKE IGNORE AND GLOBAL SEARCH

let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line

let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /TWINKLE/gi; // Change this line
let result = twinkleStar.match(starRegex); // Change this line
WHEN YOU NEED TO MATCH A WORD THAT BEGIN WITH SPECIFIC LETTER BUT ENDS IN ANY WORD OR THE OPPORSITE YOU CAN USE THE WILDCARD PERIOD

let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /.un/; // Change this line
let result = unRegex.test(exampleStr);

FIND MULTIPLE SPECIFIC CHARACTERS  
let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line

FIND THE MATCHES BETWEEN A RANGE OF LETTERS

let quoteSample = "The quick brown fox jumps over the lazy dog.";
let alphabetRegex = /[a-z]/gi; // Change this line
let result = quoteSample.match(alphabetRegex); // Change this line

MATCH NUMBER AND LETTERS AT THE SAME TIME

let quoteSample = "Blueberry 3.141592653s are delicious.";
let myRegex = /[H-S2-6]/ig; // Change this line
let result = quoteSample.match(myRegex); // Change this line

MATCH THE CHARACTERS THAT YOU DO NOT WANT TO FIND

let quoteSample = "3 blind mice.";
let myRegex = /[^aeiou1-9]/gi; // Change this line
let result = quoteSample.match(myRegex); // Change this line

--Match Characters that Occur One or More Times
let difficultSpelling = "Mississippi";
let myRegex = /S+/gi; // Change this line
let result = difficultSpelling.match(myRegex);

--Match Characters that Occur Zero or More Times

// Only change code below this line
let chewieRegex = /Aa*/; // Change this line
// Only change code above this line

let result = chewieQuote.match(chewieRegex);

FIND THE MIN SUBSTRING THAT ACCOMPLISH A CONDITION

find <h1>
let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?1>/; // Change this line
let result = text.match(myRegex);

EXAMPLE FIND CRIMINAL REPRESENTED WITH 'C' EVEN IF IT IS ONE OR MORE
let reCriminals = /CC*/g; // Change this line

--Match Beginning String Patterns

let rickyAndCal = "Cal and Ricky both like racing.";
let calRegex = /^Cal/; // Change this line
let result = calRegex.test(rickyAndCal);

--Match Ending String Patterns

let caboose = "The last car on a train is the caboose";
let lastRegex = /caboose$/; // Change this line
let result = lastRegex.test(caboose);

--Match All Letters and Numbers

let quoteSample = "The five boxing wizards jump quickly.";
let alphabetRegexV2 = /\w/g; // Change this line
let result = quoteSample.match(alphabetRegexV2).length;

--Match Everything But Letters and Numbers
let quoteSample = "The five boxing wizards jump quickly.";
let nonAlphabetRegex = /\W/g; // Change this line
let result = quoteSample.match(nonAlphabetRegex).length;

MATCH ALL NUMBERS
let movieName = "2001: A Space Odyssey";
let numRegex = /\d/g; // Change this line
let result = movieName.match(numRegex).length;

NON DIGITS
let movieName = "2001: A Space Odyssey";
let noNumRegex = /\D/g; // Change this line
let result = movieName.match(noNumRegex).length;

EX RESTRICT USERNAMES

let username = "JackOfAllTrades";
let userCheck = /^[a-z][a-z]+[0-9]*$|^[a-z]\d\d+$/i; // Change this line
let result = userCheck.test(username);

--Match Whitespace

let sample = "Whitespace is important in separating words";
let countWhiteSpace = /\s/g; // Change this line
let result = sample.match(countWhiteSpace);

-- MATCH NOT WHITESPACES

let sample = "Whitespace is important in separating words";
let countNonWhiteSpace = /\S/g; // Change this line
let result = sample.match(countNonWhiteSpace);

--Specify Upper and Lower Number of Matches

let ohStr = "Ohhh no";
let ohRegex = /Oh{3,6} no/; // Change this line
let result = ohRegex.test(ohStr);

--Specify Only the Lower Number of Matches

let haStr = "Hazzzzah";
let haRegex = /Haz{4,}ah/; // Change this line
let result = haRegex.test(haStr);

Specify Exact Number of Matches

let timStr = "Timmmmber";
let timRegex = /Tim{4}ber/; // Change this line
let result = timRegex.test(timStr);

Check for All or None
 THE PRECEEDING CHARACTER BECOMES OPTIONAL AND VERIFY MATCHES WITH IT AND WITHOUT IT 
 
 let favWord = "favorite";
let favRegex = /favou?rite/; // Change this line
let result = favRegex.test(favWord);

--Positive and Negative Lookahead
let sampleWord = "astronaut";
let pwRegex = /(?=\w{6,})(?=\D*\d{2})/; // Change this line
let result = pwRegex.test(sampleWord);

--Check For Mixed Grouping of Characters

let myString = "Eleanor Roosevelt";
let myRegex = /(Franklin|Eleanor)+.*?Roosevelt/i; // Change this line
let result = myRegex.test(myString); // Change this line
// After passing the challenge experiment with myString and see how the grouping works

--Reuse Patterns Using Capture Groups

let repeatNum = "42 42 42";
let reRegex = /^(\d+)\s\1\s\1$/; // Change this line
let result = reRegex.test(repeatNum);

--Use Capture Groups to Search and Replace

let str = "one two three";
let fixRegex = /(\w+)\s(\w+)\s(\w+)/; // Change this line
let replaceText = '$3 $2 $1'; // Change this line
let result = str.replace(fixRegex, replaceText);

--Remove Whitespace from Start and End

let hello = "   Hello, World!  ";
let wsRegex = /^\s+|\s+$/g; // Change this line
let result = hello.replace(wsRegex,""); // Change this line
console.log(result)

DEBUGGING

console.log();
console.clear();
Verify the type of the answer
console.log(typeof "");

ARRAYS FUNCTION SPLICE
2 PARAMS== REMOVE FROM THE FIRST PARAMETER THE NUMBER OF THE SECOND PARAMETER

let array = ['today', 'was', 'not', 'so', 'great'];

array.splice(2, 2);

ARRAYS FUNCTION SPLICE
3 PARAMS== REMOVE FROM THE FIRST PARAMETER THE NUMBER OF THE SECOND PARAMETER AND ADD ALL THE FOLLOWING PARAMETERS TO THAT POSITION

function htmlColorNames(arr) {
  // Only change code below this line
arr.splice(0,2,'DarkSalmon','BlanchedAlmond')
  // Only change code above this line
  return arr;
}

console.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));

ARRAYS FUNCTIONS SLICE

REMOVE FROM THE FIRST PARAMETER THE NUMBER OF THE SECOND PARAMETER WITHOUT REMOVING THE SECOND PARAMETER
IMPORTANT: CREATE NEW ARRAY TO SAVE THE NEW SLICED ARRAY

function forecast(arr) {
  // Only change code below this line
let me=arr.slice(2,4);

console.log(me);
  return me;
}

// Only change code above this line
console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));

COPY ARRAY SPREAD OPERATOR

function copyMachine(arr, num) {
  let newArr = [];
  while (num >= 1) {
    // Only change code below this line
newArr.push([...arr]);
    // Only change code above this line
    num--;
  }
  return newArr;
}

console.log(copyMachine([true, false, true], 2));

COMBINE ARRAYS WITH SPREAD FUNCTIONS

function spreadOut() {
  let fragment = ['to', 'code'];
  let sentence=['learning',...fragment,'is','fun']; // Change this line
  return sentence;
}

console.log(spreadOut());

CHECK PRESENCE ELEMENT WITH INDEXOF

function quickCheck(arr, elem) {
  // Only change code below this line

return arr.indexOf(elem)==-1? false:true;
  // Only change code above this line
}

console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));

--Iterate Through All an Array's Items Using For Loops

function filteredArray(arr, elem) {
  let newArr = [];
  // Only change code below this line

 for (let i = 0; i < arr.length; i++) {
 

if(arr[i].indexOf(elem)==-1)
{
newArr.push(arr[i]);
}
   

  
 }
  
  // Only change code above this line
  return newArr;
}

console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));

--Add Key-Value Pairs to JavaScript Objects

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28
};

// Only change code below this line
foods.bananas=13;
foods.grapes=35;
foods.strawberries=27;
// Only change code above this line

console.log(foods);

MODIFY A NESTED OBJECT

let userActivity = {
  id: 23894201352,
  date: 'January 1, 2017',
  data: {
    totalUsers: 51,
    online: 42
  }
};

// Only change code below this line
userActivity.data.online=45;
// Only change code above this line

console.log(userActivity);

ACCESS PROPERTIES VALUES WITH BRACKET NOTATION

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

function checkInventory(scannedItem) {
  // Only change code below this line
return foods[scannedItem];

  // Only change code above this line
}

console.log(checkInventory("apples"));

DELETE KEYWORD TO REMOVE OBJECT PROPERTIES

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

// Only change code below this line
delete foods['oranges'];
delete foods.strawberries;
delete foods.plums;
// Only change code above this line

console.log(foods);

CHECK IF AN OBJECT HAS A PROPERTY

users.hasOwnProperty('Alan');
'Alan' in users;

EX1.

let users = {
  Alan: {
    age: 27,
    online: true
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: true
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function isEveryoneHere(userObj) {
  // Only change code below this line
 return 'Alan' in userObj&&'Jeff' in userObj&&'Sarah' in userObj&&'Ryan' in userObj;
  // Only change code above this line
}

console.log(isEveryoneHere(users));

--Iterate Through the Keys of an Object with a for...in Statement

const users = {
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: false
  }
}

function countOnline(usersObj) {
  // Only change code below this line
  var count=0;
for (let user in usersObj) {
  if(usersObj[user].online==true)
  {
count++;
  }
}
return count;
  // Only change code above this line
}

console.log(countOnline(users));

RETURN OBJECT KEYS

let users = {
  Alan: {
    age: 27,
    online: false
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: false
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function getArrayOfUsers(obj) {
  // Only change code below this line
return Object.keys(obj)
  // Only change code above this line
}

console.log(getArrayOfUsers(users));

--Modify an Array Stored in an Object

let user = {
  name: 'Kenneth',
  age: 28,
  data: {
    username: 'kennethCodesAllDay',
    joinDate: 'March 26, 2016',
    organization: 'freeCodeCamp',
    friends: [
      'Sam',
      'Kira',
      'Tomo'
    ],
    location: {
      city: 'San Francisco',
      state: 'CA',
      country: 'USA'
    }
  }
};

function addFriend(userObj, friend) {
  // Only change code below this line
userObj.data.friends.push(friend);
return userObj.data.friends;
  // Only change code above this line
}

console.log(addFriend(user, 'Pete'));

--Convert Celsius to Fahrenheit

function convertCtoF(celsius) {
  let fahrenheit;
  return fahrenheit=(celsius*9/5)+32;
}

convertCtoF(30);

--Reverse a 


function reverseString(str) {
  return str.split('').reverse().join('');
}

reverseString("hello");


FACTORIAL WITH RECURSSION

function factorialize(num) {

  var multiply=1;
    if (num<=1) {
       return 1;
     } else {
          
       const n = factorialize(num-1);
    multiply=n*(num);
    
     }
   return multiply;
 }

factorialize(5);

FIND THE LONGEST WORD IN THE STRING

function findLongestWordLength(str) {
 var contador=0;
    var count=0;
      for(let i=0; i<str.length;i++)
      {
      
        count++;
        if(str[i]==' ')
        {
            
          count--;
          if(contador<count)
          {
            contador=count;
            count=0;
          }
          count=0;
        }
        else if(contador<count)
        {
          contador=count;
          
        }

      }
  
      return contador;
    }

findLongestWordLength("The quick brown fox jumped over the lazy dog");

RETURN LARGEST NUMBER IN ARRAY

function largestOfFour(arr) {
var arr2=[];
  for(let i=0;i<arr.length;i++)
  {
    var maxNum=Math.max(...arr[i]);
    arr2.push(maxNum);
  }
  return arr2;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

--Confirm the Ending

function confirmEnding(str, target) {

var z=str.length-target.length;
var m="";

for(let i=z;i<str.length;i++ )
{
m=m+str[i];
}
if(m==target)
{
  return true;
}
 else 
 {
   return false;
 }
 
}


confirmEnding("Bastian", "n");

OR

function confirmEnding(str, target) {

  return str.slice(-target.length) === target
 
}


confirmEnding("Bastian", "n");

REPEAT STRING N TIMES

function repeatStringNumTimes(str, num) {
 var a="";
  
  for(let i=0; i<num; i++)
  {
   
   a+=str;
    
  }
 
  return a;
}

repeatStringNumTimes("abc", 3);

RETURN STRING WITH ... IF THE TARGET LENGTH IS LESS THAN STRING.LENGTH

function truncateString(str, num) {


  return str.length>num?
   str.slice(0,num)+"..."
   :str;
 
}

truncateString("A-tisket a-tasket A green and yellow basket", 8);

FINDER KEEPERS

function findElement(arr, func) {
 
  for(let i=0; i<arr.length;i++)
  {
    var num=arr[i];
    if (func(num))
    {return num;}
  }
  return undefined;
}

findElement([1, 2, 3, 4], num => num % 2 === 0);

--Classified as a boolean primitive

function booWho(bool) {
  
  return bool===true|bool===false?true:false;
}

booWho(null);

--Capitalize first character
function titleCase(str) {
var stro=str.toLowerCase();
    const arr = stro.split(" ");

    
    
    
    for (var i = 0; i < arr.length; i++) {
        arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);
    
    }
 
    const str2 = arr.join(" ");
    console.log(str2);
    return str2;
}
  
  titleCase("I'm a little tea pot");
  
  SLICE AND SPLICE
  
  function frankenSplice(arr1, arr2, n) {
  var arr4=[];
  arr4.push(...arr2);
  var arr3=arr4.splice(0,n);
arr3.push(...arr1);
arr3.push(...arr4)

  console.log(arr3);
  return arr3;
}

frankenSplice([1, 2, 3], [4, 5, 6], 1);

FALSY BOUNCER
function bouncer(arr) {
  let newArray = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) newArray.push(arr[i]);
  }
  return newArray;
}

bouncer([false, null, 0, NaN, undefined, ""]);

FIND THE INDEX WHERE WAS PUSHED A NUMBER

function getIndexToIns(arr, num) {
  arr.push(num);
  arr.sort((a, b) => a - b);
  for(let i=0;i<arr.length;i++)
  {
    if(arr[i]==num)
    {
      num=i;
      return i;
    }
  }

  return arr.length;
}

getIndexToIns([40, 60], 500);


VERIFY IF LETTER OF ONE ARRAY ARE IN OTHER ARRAY

function mutation(arr) {
  let test = arr[1].toLowerCase();
  let target = arr[0].toLowerCase();
  for (let i = 0; i < test.length; i++) {
    if (target.indexOf(test[i]) < 0) return false;
  }
  return true;
}

--Chunky Monkey

function chunkArrayInGroups(arr, size) {
var z=[];
  
 while(arr.length>0)
 {
      var arr3=[];
arr3=[arr.splice(0,size)];


z.push(...arr3);
console.log(z)
 }

  return z;
}

chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2);

--Create a Basic JavaScript Object

let dog = {
name: "Aflac",
  numLegs: 2
};

--Create a Method on an Object

let dog = {
  name: "Spot",
  numLegs: 4,
sayLegs: function() {return "This dog has " + dog. numLegs + " legs.";}
};

dog.sayLegs();

--Make Code More Reusable with the this Keyword

let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function() {return "This dog has " + this.numLegs + " legs.";}
};

dog.sayLegs();

--Define a Constructor Function

function Dog() {
  this.name = "";
  this.color = "";
  this.numLegs = 0;
}

--Use a Constructor to Create Objects

function Dog() {
  this.name = "Rupert";
  this.color = "brown";
  this.numLegs = 4;
}
// Only change code below this line
let hound = new Dog();
hound.name = 'Elvira';
hound.color = 'black';
hound.numLegs = 4;

--Extend Constructors to Receive Arguments
function Dog(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 4;
}

let terrier = new Dog('Elvira','black');


--Verify an Object's Constructor with instanceof
function House(numBedrooms) {
  this.numBedrooms = numBedrooms;
}

let myHouse=new House(4);
myHouse instanceof House;
// Only change code below this line

--Understand Own Properties

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let canary = new Bird("Tweety");
let ownProps = [];

for (let property in canary) {
  if(canary.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}

--Use Prototype Properties to Reduce Duplicate Code

function Dog(name) {
  this.name = name;

}

 Dog.prototype.numLegs = 4;

// Only change code above this line
let beagle = new Dog("Snoopy");

--Iterate Over All Properties

function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

let beagle = new Dog("Snoopy");

let ownProps = [];
let prototypeProps = [];

for (let property in beagle) {
  if(beagle.hasOwnProperty(property)) {
    ownProps.push(property);
  } else {
    prototypeProps.push(property);
  }
}

console.log(ownProps);
console.log(prototypeProps);
// Only change code below this line

--Understand the Constructor Property

function Dog(name) {
  this.name = name;
}

// Only change code below this line
function joinDogFraternity(candidate) {
 if (candidate.constructor === Dog) {
    return true;
  } else {
    return false;
  }
}

--Change the Prototype to a New Object

function Dog(name) {
  this.name = name;
}

Dog.prototype = {
  // Only change code below this line
 numLegs: 2, 
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};

--Remember to Set the Constructor Property when Changing the Prototype

function Dog(name) {
  this.name = name;
}

// Only change code below this line
Dog.prototype = {
constructor:Dog,
  numLegs: 4,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};

--Understand Where an Object’s Prototype Comes From

function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");

// Only change code below this line
Dog.prototype.isPrototypeOf(beagle);

--Understand the Prototype Chain
function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");

Dog.prototype.isPrototypeOf(beagle);  // yields true

// Fix the code below so that it evaluates to true
Object.prototype.isPrototypeOf(Dog.prototype);

--Use Inheritance So You Don't Repeat Yourself

function Cat(name) {
  this.name = name;
}

Cat.prototype = {
  constructor: Cat,
 
  
};

function Bear(name) {
  this.name = name;
}

Bear.prototype = {
  constructor: Bear,
 
};

function Animal() { }

Animal.prototype = {
  constructor: Animal,
 eat: function() {
    console.log("nom nom nom");
  }
};

--Inherit Behaviors from a Supertype

function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

// Only change code below this line

let duck= Object.create(Animal.prototype);; // Change this line
let beagle= Object.create(Animal.prototype);; // Change this line

--Set the Child's Prototype to an Instance of the Parent

function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

function Dog() { }

// Only change code below this line
Dog.prototype=Object.create(Animal.prototype);

let beagle = new Dog();

--Reset an Inherited Constructor Property
function Animal() { }
function Bird() { }
function Dog() { }

Bird.prototype = Object.create(Animal.prototype);
Dog.prototype = Object.create(Animal.prototype);

// Only change code below this line



let duck = new Bird();
Bird.prototype.constructor = Bird;
duck.constructor
let beagle = new Dog();
Dog.prototype.constructor = Dog;
beagle.constructor

--Add Methods After Inheritance
function Animal() { }
Animal.prototype.eat = function() { console.log("nom nom nom"); };

function Dog() { }

// Only change code below this line
Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;
Dog.prototype.bark = function() {
  console.log("Woof!");
};

// Only change code above this line

let beagle = new Dog();

--Override Inherited Methods
function Bird() { }

Bird.prototype.fly = function() { return "I am flying!"; };

function Penguin() { }
Penguin.prototype = Object.create(Bird.prototype);
Penguin.prototype.constructor = Penguin;

// Only change code below this line

Penguin.prototype.fly = function() {
  return "Alas, this is a flightless bird.";
};

// Only change code above this line

let penguin = new Penguin();
console.log(penguin.fly());

--Use a Mixin to Add Common Behavior Between Unrelated Objects

let bird = {
  name: "Donald",
  numLegs: 2
};

let boat = {
  name: "Warrior",
  type: "race-boat"
};

// Only change code below this line
let glideMixin = function(obj) {
  obj.glide = function() {
    console.log("Flying, wooosh!");
  }
};
glideMixin(bird);
glideMixin(boat);

--Use Closure to Protect Properties Within an Object from Being Modified Externally

function Bird() {
let weight=15;

this.getWeight = function() { 
    return weight;
  };
}

--Understand the Immediately Invoked Function Expression (IIFE)

(function () {
  console.log("A cozy nest is ready");
})();

--Use an IIFE to Create a Module

let funModule=(function(){
  return{
 isCuteMixin: function(obj) {
  obj.isCute = function() {
    return true;
  };
},
singMixin: function(obj) {
  obj.sing = function() {
    console.log("Singing to an awesome tune");
  };
}}})();

--FUNCTIONAL PROGRAMMING
1.Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change

2.Pure functions - the same input always gives the same output

3.Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled

// Function that returns a string representing a cup of green tea
const prepareTea = () => 'greenTea';

/*
Given a function (representing the tea type) and number of cups needed, the
following function returns an array of strings (each representing a cup of
a specific type of tea).
*/
const getTea = (numOfCups) => {
  const teaCups = [];

  for(let cups = 1; cups <= numOfCups; cups += 1) {
    const teaCup = prepareTea();
    teaCups.push(teaCup);
  }
  return teaCups;
};

// Only change code below this line
const tea4TeamFCC = getTea(40);
// Only change code above this line

--FP TERMINOLOGY
Callbacks are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in filter, the callback function tells JavaScript the criteria for how to filter an array.
The functions that take a function as an argument, or return a function as a return value are called higher order functions.

When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a lambda.

// Function that returns a string representing a cup of green tea
const prepareGreenTea = () => 'greenTea';

// Function that returns a string representing a cup of black tea
const prepareBlackTea = () => 'blackTea';

/*
Given a function (representing the tea type) and number of cups needed, the
following function returns an array of strings (each representing a cup of
a specific type of tea).
*/
const getTea = (prepareTea, numOfCups) => {
  const teaCups = [];

  for(let cups = 1; cups <= numOfCups; cups += 1) {
    const teaCup = prepareTea();
    teaCups.push(teaCup);
  }
  return teaCups;
};

// Only change code below this line
const tea4GreenTeamFCC = getTea(prepareGreenTea,27);
const tea4BlackTeamFCC = getTea(prepareBlackTea,13);
// Only change code above this line

console.log(
  tea4GreenTeamFCC,
  tea4BlackTeamFCC
);

--Understand the Hazards of Using Imperative Code
// tabs is an array of titles of each site open within the window
const Window = function(tabs) {
  this.tabs = tabs; // We keep a record of the array inside the object
};

// When you join two windows into one window
Window.prototype.join = function(otherWindow) {
  this.tabs = this.tabs.concat(otherWindow.tabs);
  return this;
};

// When you open a new tab at the end
Window.prototype.tabOpen = function(tab) {
  this.tabs.push('new tab'); // Let's open a new tab for now
  return this;
};

// When you close a tab
Window.prototype.tabClose = function(index) {

  // Only change code below this line

  const tabsBeforeIndex = this.tabs.slice(0, index); // Get the tabs before the tab
  const tabsAfterIndex = this.tabs.slice(index+1); // Get the tabs after the tab

  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together

  // Only change code above this line

  return this;
 };

// Let's create three browser windows
const workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites
const socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites
const videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); // Entertainment sites

// Now perform the tab opening, closing, and other operations
const finalTabs = socialWindow
  .tabOpen() // Open a new tab for cat memes
  .join(videoWindow.tabClose(2)) // Close third tab in video window, and join
  .join(workWindow.tabClose(1).tabOpen());
console.log(finalTabs.tabs);

--Avoid Mutations and Side Effects Using Functional Programming
*it is important to not change values of global variables


// The global variable
let fixedValue = 4;

function incrementer() {
  // Only change code below this line

return fixedValue+1;
  // Only change code above this line
}

--Pass Arguments to Avoid External Dependence in a Function

// The global variable
let fixedValue = 4;

// Only change code below this line
function incrementer(principalValue) {

return principalValue+1;
  // Only change code above this line
}

--Refactor Global Variables Out of Functions
NEVER USE THE VARIABLE ALWAYS CREATE A NEW ONE AND SAFE THE OLD ONE FOR METHODS AND FUNCTIONS

// The global variable
const bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "Philosophiæ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];

// Change code below this line
function add(list1,bookName) {
  let list=[...list1];
  list.push(bookName);
  return list;
  
  // Change code above this line
}

// Change code below this line
function remove(list1,bookName) {
  const book_index = bookList.indexOf(bookName);
  if (book_index >= 0) {
let list=[...list1];
   list.splice(book_index, 1);
    return list;

    // Change code above this line
    }
}

--Use the map Method to Extract Data from an Array

// The global variable
const watchList = [
  {
    "Title": "Inception",
    "Year": "2010",
    "Rated": "PG-13",
    "Released": "16 Jul 2010",
    "Runtime": "148 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Christopher Nolan",
    "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
    "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
    "Language": "English, Japanese, French",
    "Country": "USA, UK",
    "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.8",
    "imdbVotes": "1,446,708",
    "imdbID": "tt1375666",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Interstellar",
    "Year": "2014",
    "Rated": "PG-13",
    "Released": "07 Nov 2014",
    "Runtime": "169 min",
    "Genre": "Adventure, Drama, Sci-Fi",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan, Christopher Nolan",
    "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
    "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
    "Language": "English",
    "Country": "USA, UK",
    "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.6",
    "imdbVotes": "910,366",
    "imdbID": "tt0816692",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "The Dark Knight",
    "Year": "2008",
    "Rated": "PG-13",
    "Released": "18 Jul 2008",
    "Runtime": "152 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
    "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
    "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
    "Language": "English, Mandarin",
    "Country": "USA, UK",
    "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
    "Metascore": "82",
    "imdbRating": "9.0",
    "imdbVotes": "1,652,832",
    "imdbID": "tt0468569",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Batman Begins",
    "Year": "2005",
    "Rated": "PG-13",
    "Released": "15 Jun 2005",
    "Runtime": "140 min",
    "Genre": "Action, Adventure",
    "Director": "Christopher Nolan",
    "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
    "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
    "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
    "Language": "English, Urdu, Mandarin",
    "Country": "USA, UK",
    "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
    "Metascore": "70",
    "imdbRating": "8.3",
    "imdbVotes": "972,584",
    "imdbID": "tt0372784",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Avatar",
    "Year": "2009",
    "Rated": "PG-13",
    "Released": "18 Dec 2009",
    "Runtime": "162 min",
    "Genre": "Action, Adventure, Fantasy",
    "Director": "James Cameron",
    "Writer": "James Cameron",
    "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
    "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
    "Language": "English, Spanish",
    "Country": "USA, UK",
    "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
    "Metascore": "83",
    "imdbRating": "7.9",
    "imdbVotes": "876,575",
    "imdbID": "tt0499549",
    "Type": "movie",
    "Response": "True"
  }
];

// Only change code below this line

const ratings = watchList.map(detail => ({
  title:detail["Title"],
  rating:detail["imdbRating"]

}));


// Only change code above this line

console.log(JSON.stringify(ratings));

--Implement map on a Prototype

// The global variable
const s = [23, 65, 98, 5];

Array.prototype.myMap = function(callback) {
  const newArray = [];
  // Only change code below this line
for(let i=0;i<this.length;i++)
{
  newArray.push(callback(this[i]));
}
  // Only change code above this line
  return newArray;
};

const new_s = s.myMap(function(item) {
  return item * 2;
});

--Use the filter Method to Extract Data from an Array

// The global variable
const watchList = [
  {
    "Title": "Inception",
    "Year": "2010",
    "Rated": "PG-13",
    "Released": "16 Jul 2010",
    "Runtime": "148 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Christopher Nolan",
    "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
    "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
    "Language": "English, Japanese, French",
    "Country": "USA, UK",
    "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.8",
    "imdbVotes": "1,446,708",
    "imdbID": "tt1375666",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Interstellar",
    "Year": "2014",
    "Rated": "PG-13",
    "Released": "07 Nov 2014",
    "Runtime": "169 min",
    "Genre": "Adventure, Drama, Sci-Fi",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan, Christopher Nolan",
    "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
    "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
    "Language": "English",
    "Country": "USA, UK",
    "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.6",
    "imdbVotes": "910,366",
    "imdbID": "tt0816692",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "The Dark Knight",
    "Year": "2008",
    "Rated": "PG-13",
    "Released": "18 Jul 2008",
    "Runtime": "152 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
    "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
    "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
    "Language": "English, Mandarin",
    "Country": "USA, UK",
    "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
    "Metascore": "82",
    "imdbRating": "9.0",
    "imdbVotes": "1,652,832",
    "imdbID": "tt0468569",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Batman Begins",
    "Year": "2005",
    "Rated": "PG-13",
    "Released": "15 Jun 2005",
    "Runtime": "140 min",
    "Genre": "Action, Adventure",
    "Director": "Christopher Nolan",
    "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
    "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
    "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
    "Language": "English, Urdu, Mandarin",
    "Country": "USA, UK",
    "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
    "Metascore": "70",
    "imdbRating": "8.3",
    "imdbVotes": "972,584",
    "imdbID": "tt0372784",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Avatar",
    "Year": "2009",
    "Rated": "PG-13",
    "Released": "18 Dec 2009",
    "Runtime": "162 min",
    "Genre": "Action, Adventure, Fantasy",
    "Director": "James Cameron",
    "Writer": "James Cameron",
    "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
    "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
    "Language": "English, Spanish",
    "Country": "USA, UK",
    "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
    "Metascore": "83",
    "imdbRating": "7.9",
    "imdbVotes": "876,575",
    "imdbID": "tt0499549",
    "Type": "movie",
    "Response": "True"
  }
];

// Only change code below this line

const filteredList = watchList

.filter(detail => detail["imdbRating"]>=8)

.map(detail => ({
  title:detail["Title"],
  rating:detail["imdbRating"]

}));

// Only change code above this line

console.log(filteredList);


--Implement the filter Method on a Prototype

// The global variable
const s = [23, 65, 98, 5];

Array.prototype.myFilter = function(callback) {
  // Only change code below this line
  const newArray = [];
  for(let i=0;i<this.length;i++)
{
  if(callback(this[i]))
  {
  newArray.push((this[i]));
  }
}
  // Only change code above this line
  console.log(newArray);
  return newArray;
};

const new_s = s.myFilter(function(item) {
  return item % 2 === 1;
});

Return Part of an Array Using the slice Method

function sliceArray(anim, beginSlice, endSlice) {
  // Only change code below this line

retur nanim.slice(beginSlice,endSlice);

  // Only change code above this line
}

const inputAnim = ["Cat", "Dog", "Tiger", "Zebra", "Ant"];
sliceArray(inputAnim, 1, 3);

--Remove Elements from an Array Using slice Instead of splice IN SLICE YOU CHOOSE WHAT YOU WANT TO BE THERE AFTER DOING THE SPLICE

function nonMutatingSplice(cities) {
  // Only change code below this line
  
  return cities.slice(0,3) ;

  // Only change code above this line
}

const inputCities = ["Chicago", "Delhi", "Islamabad", "London", "Berlin"];
nonMutatingSplice(inputCities);

--Combine Two Arrays Using the concat Method

function nonMutatingConcat(original, attach) {
  // Only change code below this line

return original.concat(attach);
  // Only change code above this line
}

const first = [1, 2, 3];
const second = [4, 5];
nonMutatingConcat(first, second);

--Add Elements to the End of an Array Using concat Instead of push

function nonMutatingPush(original, newItem) {
  // Only change code below this line
  return original.concat(newItem);

  // Only change code above this line
}

const first = [1, 2, 3];
const second = [4, 5];
nonMutatingPush(first, second);


--Use the reduce Method to Analyze Data

// The global variable
const watchList = [
  {
    "Title": "Inception",
    "Year": "2010",
    "Rated": "PG-13",
    "Released": "16 Jul 2010",
    "Runtime": "148 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Christopher Nolan",
    "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
    "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
    "Language": "English, Japanese, French",
    "Country": "USA, UK",
    "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.8",
    "imdbVotes": "1,446,708",
    "imdbID": "tt1375666",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Interstellar",
    "Year": "2014",
    "Rated": "PG-13",
    "Released": "07 Nov 2014",
    "Runtime": "169 min",
    "Genre": "Adventure, Drama, Sci-Fi",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan, Christopher Nolan",
    "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
    "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
    "Language": "English",
    "Country": "USA, UK",
    "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.6",
    "imdbVotes": "910,366",
    "imdbID": "tt0816692",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "The Dark Knight",
    "Year": "2008",
    "Rated": "PG-13",
    "Released": "18 Jul 2008",
    "Runtime": "152 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
    "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
    "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
    "Language": "English, Mandarin",
    "Country": "USA, UK",
    "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
    "Metascore": "82",
    "imdbRating": "9.0",
    "imdbVotes": "1,652,832",
    "imdbID": "tt0468569",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Batman Begins",
    "Year": "2005",
    "Rated": "PG-13",
    "Released": "15 Jun 2005",
    "Runtime": "140 min",
    "Genre": "Action, Adventure",
    "Director": "Christopher Nolan",
    "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
    "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
    "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
    "Language": "English, Urdu, Mandarin",
    "Country": "USA, UK",
    "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
    "Metascore": "70",
    "imdbRating": "8.3",
    "imdbVotes": "972,584",
    "imdbID": "tt0372784",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Avatar",
    "Year": "2009",
    "Rated": "PG-13",
    "Released": "18 Dec 2009",
    "Runtime": "162 min",
    "Genre": "Action, Adventure, Fantasy",
    "Director": "James Cameron",
    "Writer": "James Cameron",
    "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
    "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
    "Language": "English, Spanish",
    "Country": "USA, UK",
    "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
    "Metascore": "83",
    "imdbRating": "7.9",
    "imdbVotes": "876,575",
    "imdbID": "tt0499549",
    "Type": "movie",
    "Response": "True"
  }
];

function getRating(watchList) {
  // Only change code below this line
  let averageRating;
const filteredList = watchList

.filter(detail => detail["Director"]=="Christopher Nolan")
.map(detail => ({
 
  rating:detail["imdbRating"]

}));



const averageRatings = filteredList.reduce((sum, movie) => sum + parseFloat(movie.rating), 0);

  // Only change code above this line
  return averageRatings/filteredList.length;
}

console.log(getRating(watchList));

OR

// The global variable
const watchList = [
  {
    "Title": "Inception",
    "Year": "2010",
    "Rated": "PG-13",
    "Released": "16 Jul 2010",
    "Runtime": "148 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Christopher Nolan",
    "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
    "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
    "Language": "English, Japanese, French",
    "Country": "USA, UK",
    "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.8",
    "imdbVotes": "1,446,708",
    "imdbID": "tt1375666",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Interstellar",
    "Year": "2014",
    "Rated": "PG-13",
    "Released": "07 Nov 2014",
    "Runtime": "169 min",
    "Genre": "Adventure, Drama, Sci-Fi",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan, Christopher Nolan",
    "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
    "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
    "Language": "English",
    "Country": "USA, UK",
    "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
    "Metascore": "74",
    "imdbRating": "8.6",
    "imdbVotes": "910,366",
    "imdbID": "tt0816692",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "The Dark Knight",
    "Year": "2008",
    "Rated": "PG-13",
    "Released": "18 Jul 2008",
    "Runtime": "152 min",
    "Genre": "Action, Adventure, Crime",
    "Director": "Christopher Nolan",
    "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
    "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
    "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
    "Language": "English, Mandarin",
    "Country": "USA, UK",
    "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
    "Metascore": "82",
    "imdbRating": "9.0",
    "imdbVotes": "1,652,832",
    "imdbID": "tt0468569",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Batman Begins",
    "Year": "2005",
    "Rated": "PG-13",
    "Released": "15 Jun 2005",
    "Runtime": "140 min",
    "Genre": "Action, Adventure",
    "Director": "Christopher Nolan",
    "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
    "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
    "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
    "Language": "English, Urdu, Mandarin",
    "Country": "USA, UK",
    "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
    "Metascore": "70",
    "imdbRating": "8.3",
    "imdbVotes": "972,584",
    "imdbID": "tt0372784",
    "Type": "movie",
    "Response": "True"
  },
  {
    "Title": "Avatar",
    "Year": "2009",
    "Rated": "PG-13",
    "Released": "18 Dec 2009",
    "Runtime": "162 min",
    "Genre": "Action, Adventure, Fantasy",
    "Director": "James Cameron",
    "Writer": "James Cameron",
    "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
    "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
    "Language": "English, Spanish",
    "Country": "USA, UK",
    "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
    "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
    "Metascore": "83",
    "imdbRating": "7.9",
    "imdbVotes": "876,575",
    "imdbID": "tt0499549",
    "Type": "movie",
    "Response": "True"
  }
];

function getRating(watchList) {
  // Only change code below this line
 
const averageRatings = watchList

.filter(detail => detail["Director"]=="Christopher Nolan")
.map(detail => ({
 
  rating:detail["imdbRating"]

}))
.reduce((sum, movie) => sum + parseFloat(movie.rating),0)/ watchList.filter(detail => detail["Director"]=="Christopher Nolan").length
;





  // Only change code above this line
  return averageRatings;
}

console.log(getRating(watchList));

--Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem

const squareList = arr => {
  // Only change code below this line
return arr
.filter(value=>value % 1 == 0&&value>0)
.map(num=>num*num);
  // Only change code above this line
};

const squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);
console.log(squaredIntegers);

--Sort an Array Alphabetically using the sort Method

function alphabeticalOrder(arr) {
  // Only change code below this line

  return arr.sort(function(a,b){
return a===b?0:a<b?-1:1;

  });
  // Only change code above this line
}

alphabeticalOrder(["a", "d", "c", "a", "z", "g"]);

--Return a Sorted Array Without Changing the Original Array

const globalArray = [5, 6, 3, 2, 9];

function nonMutatingSort(arr) {
  // Only change code below this line

const arr1=[...arr];

  return arr1.sort(function(a, b) {
    return a - b;
  });


  // Only change code above this line
}

nonMutatingSort(globalArray);

--Split a String into an Array Using the split Method

function splitify(str) {
  // Only change code below this line
return str.split(/\W/);

  // Only change code above this line
}

splitify("Hello World,I-am code");

--Combine an Array into a String Using the join Method

function sentensify(str) {
  // Only change code below this line
return str.split(/\W/).join(" ");
  // Only change code above this line
}

sentensify("May-the-force-be-with-you");

--Apply Functional Programming to Convert Strings to URL Slugs

// Only change code below this line
function urlSlug(title) {
console.log(title.trim().split(/\s+/).join("-").toLowerCase());
return title.trim().split(/\s+/).join("-").toLowerCase();
}
// Only change code above this line

--Use the every Method to Check that Every Element in an Array Meets a Criteria

function checkPositive(arr) {
  // Only change code below this line

return arr.every(function(val){
  return val>0;
});
  // Only change code above this line
}

checkPositive([1, 2, 3, -4, 5]);

--Use the some Method to Check that Any Elements in an Array Meet a Criteria

function checkPositive(arr) {
  // Only change code below this line
return arr.some(function(currentValue) {
  return currentValue >0;
});

  // Only change code above this line
}

checkPositive([1, 2, 3, -4, 5]);

--Introduction to Currying and Partial Application

function add(x) {
  // Only change code below this line
return function(y){
  return function(z){
    return x+y+z;
  };
};
  // Only change code above this line
}

add(10)(20)(30);

SUMM ALL NUMBERS IN A RANGE

function sumAll(arr) {
  
let sumBetween=0;
for(let i=Math.min(...arr); i<=Math.max(...arr);i++)

{
sumBetween+=i;
}
return sumBetween;
}

sumAll([1, 4]);

--Diff Two Arrays

function diffArray(arr1, arr2) {
  const newArr = [];
  var major=[...arr1];
  var minor=[...arr2];
 var val=false;
function check(first,second){

   for (let i = 0; i < first.length; i++) {
      if (second.indexOf(first[i]) === -1) {
  
        newArr.push(first[i]);
      }
    }
  return newArr;
}

check(major,minor);


check(minor,major);

return newArr;

}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

--Seek and Destroy

function destroyer(arr) {
      
    var newArr2=[];
     for(let j=0; j<arguments[0].length;j++)
     {
       var val=false;
        for(let i=1; i<arguments.length;i++)
     {
  if(arguments[0][j]==arguments[i])
  {
   val=true;  
  }
         }
     if (!val)
  {
    newArr2.push(arguments[0][j])
  }
     }
       return newArr2;
  }
  
  destroyer([1, 2, 3, 1, 2, 3], 2, 3);

--ART THOU
function whatIsInAName(collection, source) {
 
var count=0;
   var prop=(Object.keys(source));
  const arr = [];
  // Only change code below this line
 for(let i=0; i<collection.length;i++)
 {
   for(let j=0; j<prop.length;j++)
   {
if(collection[0,i][prop[j]]==source[prop[j]])
{
    count++;
}
   }
   if (count==prop.length)
{
 arr.push(collection[0,i]);
}
count=0;
 }
  return arr;
}

whatIsInAName([{ "apple": 1, "bat": 2 }, { "apple": 1 }, { "apple": 1, "bat": 2, "cookie": 2 }], { "apple": 1, "cookie": 2 }); 

OR
function whatIsInAName(collection, source) {
  // "What's in a name? that which we call a rose
  // By any other name would smell as sweet.”
  // -- by William Shakespeare, Romeo and Juliet
  const souceKeys = Object.keys(source);

  // filter the collection
  return collection.filter(obj => {
    for (let i = 0; i < souceKeys.length; i++) {
      if (!obj.hasOwnProperty(souceKeys[i]) ||
          obj[souceKeys[i]] !== source[souceKeys[i]]) {
        return false;
      }
    }
    return true;
  });
}

// test here
whatIsInAName(
  [
    { first: "Romeo", last: "Montague" },
    { first: "Mercutio", last: null },
    { first: "Tybalt", last: "Capulet" }
  ],
  { last: "Capulet" }
);

--Spinal Tap Case

function spinalCase(str) {
 

    return str.match(/[A-Z][a-z]+|[a-z]+/g).join("-").toLowerCase();

}

spinalCase("AllThe-small Things");

OR

function spinalCase(str) {
  // "It's such a fine line between stupid, and clever."
  // --David St. Hubbins

  return str
    .split(/\s|_|(?=[A-Z])/)
    .join("-")
    .toLowerCase();
}

--Pig Latin

function translatePigLatin(str) {
let myRegex = /^[^aeiou]+/gi; // Change this line
var result= str.match(myRegex); 

 return result?
 str.slice(result[0].length)+result+"ay"
 :  str+"way";
}


translatePigLatin("glove");
